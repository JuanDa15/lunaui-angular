{
    "pipes": [],
    "interfaces": [
        {
            "name": "Props",
            "id": "interface-Props-a4412eb416668c0db90180604c732764c5a0037a390dc5812429706d7e451858ae94f9cdb0f9f0eaefcc8f4e182fec8620538922ca742a642e7455f1325b362e",
            "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from \"@storybook/angular\";\nimport { LunaButtonComponent } from \"./button.component\";\nimport { within, expect, userEvent, fn, waitFor } from \"@storybook/test\";\n\ninterface Props extends LunaButtonComponent {\n  mode: 'light' | 'dark'\n}\n\nconst meta: Meta<Props> = {\n  title: 'Components/Buttons/Button',\n  component: LunaButtonComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'dark',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Button component is a versatile and highly customizable element designed to enhance the interactivity and accessibility of your user interfaces. Built with a focus on modern aesthetics and usability.\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaButtonComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-button\n  [size]=\"'medium'\"\n  [disabled]=\"false\"\n  [variant]=\"'filled'\"\n  (onClick)=\"onClick($event)\">\n  Click Me\n</luna-button>\n\\`\\`\\`\n\n        `\n      }\n    }\n  },\n  argTypes: {\n    mode: {\n      name: 'Mode',\n      options: ['light', 'dark'],\n      control: { type: 'select' },\n      description: 'The mode of the button',\n      table: {\n        defaultValue: { summary: 'dark' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'size',\n      options: ['small', 'medium', 'large'],\n      control: { type: 'select' },\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs',\n        type: {\n          summary: 'small | medium | large'\n        }\n      }\n    },\n    variant: {\n      name: 'variant',\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\n      control: \"select\",\n      description: 'The variant of the button',\n      table: {\n        defaultValue: { summary: 'filled' },\n        category: 'Inputs',\n        type: {\n          summary: 'filled | tonal | outlined | text | elevated'\n        }\n      }\n    },\n    disabled: {\n      name: 'disabled',\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs',\n        type: {\n          summary: 'boolean'\n        }\n      },\n    },\n    value: {\n      name: 'value',\n      control: 'text',\n      description: 'The text to display in the button',\n      table: {\n        defaultValue: { summary: 'Try me !!' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    styles: {\n      name: 'styles',\n      control: 'object',\n      description: 'The styles to apply to the button',\n      table: {\n        defaultValue: { summary: '{}' },\n        category: 'Inputs',\n        type: {\n          summary: 'Record<string, string>'\n        }\n      }\n    },\n    ariaLabel: {\n      name: 'ariaLabel',\n      description: 'The aria label for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    ariaLive: {\n      name: 'ariaLive',\n      description: 'The aria live for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'off | polite | assertive | '\n        }\n      }\n    },\n    ariaDescribedBy: {\n      name: 'ariaDescribedBy',\n      description: 'The aria described by for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    type: {\n      name: 'Type',\n      description: 'The type of the button',\n      table: {\n        defaultValue: { summary: 'button' },\n        category: 'Inputs',\n        type: {\n          summary: 'button | submit | reset'\n        }\n      }\n    },\n    form: {\n      name: 'form',\n      description: 'The form linked with the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    name: {\n      name: 'name',\n      description: 'The name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertarget: {\n      name: 'popovertarget',\n      description: 'The popover target for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertargetaction: {\n      name: 'popovertargetaction',\n      description: 'The popover target action for the button',\n      table: {\n        defaultValue: { summary: 'null' },\n        category: 'Inputs',\n        type: {\n          summary: 'hide | show | toggle | null'\n        }\n      }\n    },\n    className: {\n      name: 'className',\n      description: 'The class name for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    focus: {\n      name: 'Focus',\n      description: 'Emitted when the button is focused',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    blur: {\n      name: 'Blur',\n      description: 'Emitted when the button loses focus',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    onClick: {\n      name: 'onClick',\n      description: 'Emitted when the button is clicked',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<Event>'\n        }\n      }\n    }\n  },\n  args: {\n    mode: 'dark',\n    size: 'medium',\n    disabled: false,\n    variant: 'filled',\n    value: 'Try me !!',\n    styles: {},\n    onClick: fn(),\n    focus: fn(),\n    blur: fn()\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n    <div\n      [class.dark]=\"mode === 'dark'\"\n      [class.light]=\"mode === 'light'\"\n    >\n      <luna-button\n        [size]=\"size\"\n        [disabled]=\"disabled\"\n        [variant]=\"variant\"\n        [styles]=\"styles\"\n        (onClick)=\"onClick($event)\"\n        (focus)=\"focus($event)\"\n        (blur)=\"blur($event)\"\n      >\n        {{value}}\n      </luna-button>\n    </div>\n    `\n  })\n\n}\n\nexport default meta;\n\ntype Story = StoryObj<LunaButtonComponent>\n\nexport const Default: Story = {\n  name: 'Default Button',\n  args: {\n    variant: 'filled',\n    size: 'medium'\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByTestId('luna-button')\n    const onClickFn = fn()\n    button.onclick = onClickFn();\n\n    await step('Click button', async () => {\n      await userEvent.click(button);\n    })\n    await waitFor(() => {\n      expect(button).toHaveFocus();\n      expect(onClickFn).toHaveBeenCalled();\n    });\n\n    await step('Blur button', async () => {\n      await userEvent.click(document.body);\n    })\n    await waitFor(() => expect(button).not.toHaveFocus());\n  }\n}\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaButtonComponent"
            ]
        },
        {
            "name": "Props",
            "id": "interface-Props-954190d63eb32a337d72d45220fb6101ae6276b439f5473478624fb4ba94f7ff3f5e765bc216c13938fe3983c5b686e2d7b416ca030eececdaeae451763288ec-1",
            "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from \"@storybook/angular\";\nimport { LunaIconButtonComponent } from \"./icon-button.component\";\nimport { within, expect, userEvent, fn, waitFor } from \"@storybook/test\";\n\ninterface Props extends LunaIconButtonComponent {\n  mode: 'light' | 'dark'\n}\n\nconst meta: Meta<Props> = {\n  title: 'Components/Buttons/Icon Button',\n  component: LunaIconButtonComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'dark',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Button Icon component is designed to provide a streamlined, icon-only button for enhanced UI interactions. Whether used for compact actions, toolbars, or key visual elements, this component brings flexibility and modern design to your interfaces.\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaIconButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaIconButtonComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-icon-button\n  [size]=\"'medium'\"\n  [disabled]=\"false\"\n  [variant]=\"'filled'\"\n  (onClick)=\"onClick($event)\">\n    <svg\n      #icon fill=\"none\" viewBox=\"0 0 24 24\"\n      stroke-width=\"1.5\" stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\" stroke-linejoin=\"round\"\n        d=\"M6 18 18 6M6 6l12 12\"\n      />\n    </svg>\n</luna-icon-button>\n\\`\\`\\`\n        `\n      }\n    }\n  },\n  argTypes: {\n    mode: {\n      name: 'Mode',\n      options: ['light', 'dark'],\n      control: { type: 'select' },\n      description: 'The mode of the button',\n      table: {\n        defaultValue: { summary: 'dark' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'size',\n      options: ['small', 'medium', 'large'],\n      control: { type: 'select' },\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs',\n        type: {\n          summary: 'small | medium | large'\n        }\n      }\n    },\n    variant: {\n      name: 'variant',\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\n      control: \"select\",\n      description: 'The variant of the button',\n      table: {\n        defaultValue: { summary: 'filled' },\n        category: 'Inputs',\n        type: {\n          summary: 'filled | tonal | outlined | text | elevated'\n        }\n      }\n    },\n    disabled: {\n      name: 'disabled',\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs',\n        type: {\n          summary: 'boolean'\n        }\n      },\n    },\n    styles: {\n      name: 'styles',\n      control: 'object',\n      description: 'The styles to apply to the button',\n      table: {\n        defaultValue: { summary: '{}' },\n        category: 'Inputs',\n        type: {\n          summary: 'Record<string, string>'\n        }\n      }\n    },\n    ariaLabel: {\n      name: 'ariaLabel',\n      description: 'The aria label of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    ariaLive: {\n      name: 'ariaLive',\n      description: 'The aria live of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'off | polite | assertive | '\n        }\n      }\n    },\n    ariaDescribedBy: {\n      name: 'ariaDescribedBy',\n      description: 'The aria described by of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    type: {\n      name: 'type',\n      description: 'The type of the button',\n      table: {\n        defaultValue: { summary: 'button' },\n        category: 'Inputs',\n        type: {\n          summary: 'button | submit | reset'\n        }\n      }\n    },\n    form: {\n      name: 'form',\n      description: 'The form id linked with this button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    name: {\n      name: 'name',\n      description: 'The name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertarget: {\n      name: 'popovertarget',\n      description: 'The popover target of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertargetaction: {\n      name: 'popovertargetaction',\n      description: 'The popover target action of the button',\n      table: {\n        defaultValue: { summary: 'null' },\n        category: 'Inputs',\n        type: {\n          summary: 'hide | show | toggle | null'\n        }\n      }\n    },\n    className: {\n      name: 'className',\n      description: 'The class name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    focus: {\n      name: 'Focus',\n      description: 'Emitted when the button is focused',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    blur: {\n      name: 'Blur',\n      description: 'Emitted when the button loses focus',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    onClick: {\n      name: 'onClick',\n      description: 'Emitted when the button is clicked',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<Event>'\n        }\n      }\n    }\n  },\n  args: {\n    mode: 'dark',\n    size: 'medium',\n    disabled: false,\n    variant: 'filled',\n    styles: {},\n    onClick: fn(),\n    focus: fn(),\n    blur: fn()\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div\n        [class.dark]=\"mode === 'dark'\"\n        [class.light]=\"mode === 'light'\"\n      >\n        <luna-icon-button\n          [size]=\"size\"\n          [disabled]=\"disabled\"\n          [variant]=\"variant\"\n          [styles]=\"styles\"\n        >\n          <svg\n            #icon\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M6 18 18 6M6 6l12 12\"\n            />\n          </svg>\n        </luna-icon-button>\n      </div>\n    `\n  })\n}\n\nexport default meta;\n\ntype Story = StoryObj<LunaIconButtonComponent>;\n\nexport const Default: Story = {\n  name: 'Default Button',\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByTestId('luna-icon-button')\n    const onClickFn = fn()\n    button.onclick = onClickFn();\n\n    await step('Click button', async () => {\n      await userEvent.click(button);\n    })\n    await waitFor(() => {\n      expect(button).toHaveFocus();\n      expect(onClickFn).toHaveBeenCalled();\n    });\n\n    await step('Blur button', async () => {\n      await userEvent.click(document.body);\n    })\n    await waitFor(() => expect(button).not.toHaveFocus());\n  }\n}\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaIconButtonComponent"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Props-1"
        },
        {
            "name": "Props",
            "id": "interface-Props-09171f19196734e7538d4cd27e5277aacb7ad455f58305c6b49459a29da52aa14cb25889f0e4745cfcb7c787ff8e512385c1833b1923a0331b94739e2d982761-2",
            "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from \"@storybook/angular\";\nimport { LunaAlertComponent } from \"./alert.component\";\nimport { expect, fn, userEvent, waitFor, within } from \"@storybook/test\";\n\ninterface Props extends LunaAlertComponent {\n  content: string;\n}\n\nconst meta: Meta<Props> = {\n  title: 'Components/Feedback/Alert',\n  component: LunaAlertComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'light',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Alert Component is designed to provide users with critical notifications and messages in an accessible and customizable way. Alerts are used to communicate important information, such as success, error, warnings, or informational messages. The component supports multiple styles, making it versatile and adaptable to different use cases.\n\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaIconButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaAlertComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-alert\n  [alertStyle]=\"alertStyle\"\n  [dismissible]=\"dismissible\"\n  [show]=\"show\"\n  [showIcon]=\"showIcon\"\n  [size]=\"size\"\n  [variant]=\"variant\"\n>\n  This is an alert\n</luna-alert>\n\\`\\`\\`\n        `\n      }\n    }\n  },\n  args: {\n    content: 'This is an alert',\n    alertStyle: 'box',\n    dismissible: false,\n    show: true,\n    showIcon: false,\n    size: 'medium',\n    variant: 'info',\n    dismissed: fn(),\n  },\n  argTypes: {\n    content: {\n      name: 'Content',\n      control: { type: 'text' },\n      description: 'The content of the alert',\n      table: {\n        defaultValue: { summary: 'This is an alert' },\n        category: 'Inputs'\n      }\n    },\n    alertStyle: {\n      name: 'Alert Style',\n      control: { type: 'select' },\n      description: 'The style of the alert, text or box',\n      options: ['text', 'box'],\n      table: {\n        defaultValue: { summary: 'box' },\n        category: 'Inputs'\n      }\n    },\n    dismissible: {\n      name: 'Dismissible',\n      control: { type: 'boolean' },\n      description: 'Whether the alert allows to be dismissible',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    show: {\n      name: 'Show alert',\n      control: { type: 'boolean' },\n      description: 'Whether the alert is visible',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    showIcon: {\n      name: 'Show Icon',\n      control: { type: 'boolean' },\n      description: 'Whether the alert shows an icon',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'Size',\n      control: { type: 'select' },\n      description: 'The size of the alert',\n      options: ['small', 'medium', 'large'],\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs'\n      }\n    },\n    variant: {\n      name: 'Variant',\n      control: { type: 'select' },\n      description: 'The variant of the alert',\n      options: ['info', 'success', 'warning', 'error'],\n      table: {\n        defaultValue: { summary: 'info' },\n        category: 'Inputs'\n      }\n    },\n    role: {\n      name: 'Role',\n      description: 'The role of the alert',\n      defaultValue: 'alert',\n      table: {\n        defaultValue: { summary: 'alert' },\n        category: 'Inputs'\n      }\n    },\n    dismissed: {\n      name: 'Dismissed',\n      description: 'Event emitted when the alert is dismissed',\n      table: {\n        category: 'Outputs'\n      }\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <luna-alert\n        [alertStyle]=\"alertStyle\"\n        [dismissible]=\"dismissible\"\n        [show]=\"show\"\n        [showIcon]=\"showIcon\"\n        [size]=\"size\"\n        [variant]=\"variant\"\n      >\n        {{ content }}\n      </luna-alert>\n    `,\n  })\n}\n\nexport default meta;\n\ntype Story = StoryObj<LunaAlertComponent>;\n\nexport const Default: Story = {\n  name: 'Default Alert',\n}\n\nexport const Dismissible: Story = {\n  name: 'Dismissible Alert',\n  args: {\n    dismissible: true\n  }\n}\n\nexport const WithIcon: Story = {\n  name: 'Alert with icon',\n  args: {\n    showIcon: true\n  }\n}\n\nexport const Warning: Story = {\n  name: 'Warning Alert',\n  args: {\n    variant: 'warning'\n  }\n}\nexport const Error: Story = {\n  name: 'Error Alert',\n  args: {\n    variant: 'error'\n  }\n}\nexport const Success: Story = {\n  name: 'Success Alert',\n  args: {\n    variant: 'success'\n  }\n}\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaAlertComponent"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Props-2"
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Default Button',\n  args: {\n    variant: 'filled',\n    size: 'medium'\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByTestId('luna-button')\n    const onClickFn = fn()\n    button.onclick = onClickFn();\n\n    await step('Click button', async () => {\n      await userEvent.click(button);\n    })\n    await waitFor(() => {\n      expect(button).toHaveFocus();\n      expect(onClickFn).toHaveBeenCalled();\n    });\n\n    await step('Blur button', async () => {\n      await userEvent.click(document.body);\n    })\n    await waitFor(() => expect(button).not.toHaveFocus());\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Default Button',\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByTestId('luna-icon-button')\n    const onClickFn = fn()\n    button.onclick = onClickFn();\n\n    await step('Click button', async () => {\n      await userEvent.click(button);\n    })\n    await waitFor(() => {\n      expect(button).toHaveFocus();\n      expect(onClickFn).toHaveBeenCalled();\n    });\n\n    await step('Blur button', async () => {\n      await userEvent.click(document.body);\n    })\n    await waitFor(() => expect(button).not.toHaveFocus());\n  }\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Default Alert',\n}"
            },
            {
                "name": "Dismissible",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Dismissible Alert',\n  args: {\n    dismissible: true\n  }\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Error Alert',\n  args: {\n    variant: 'error'\n  }\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n  args: { onClick: fn() },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\n  title: 'Components/Buttons/Button',\n  component: LunaButtonComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'dark',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Button component is a versatile and highly customizable element designed to enhance the interactivity and accessibility of your user interfaces. Built with a focus on modern aesthetics and usability.\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaButtonComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-button\n  [size]=\"'medium'\"\n  [disabled]=\"false\"\n  [variant]=\"'filled'\"\n  (onClick)=\"onClick($event)\">\n  Click Me\n</luna-button>\n\\`\\`\\`\n\n        `\n      }\n    }\n  },\n  argTypes: {\n    mode: {\n      name: 'Mode',\n      options: ['light', 'dark'],\n      control: { type: 'select' },\n      description: 'The mode of the button',\n      table: {\n        defaultValue: { summary: 'dark' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'size',\n      options: ['small', 'medium', 'large'],\n      control: { type: 'select' },\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs',\n        type: {\n          summary: 'small | medium | large'\n        }\n      }\n    },\n    variant: {\n      name: 'variant',\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\n      control: \"select\",\n      description: 'The variant of the button',\n      table: {\n        defaultValue: { summary: 'filled' },\n        category: 'Inputs',\n        type: {\n          summary: 'filled | tonal | outlined | text | elevated'\n        }\n      }\n    },\n    disabled: {\n      name: 'disabled',\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs',\n        type: {\n          summary: 'boolean'\n        }\n      },\n    },\n    value: {\n      name: 'value',\n      control: 'text',\n      description: 'The text to display in the button',\n      table: {\n        defaultValue: { summary: 'Try me !!' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    styles: {\n      name: 'styles',\n      control: 'object',\n      description: 'The styles to apply to the button',\n      table: {\n        defaultValue: { summary: '{}' },\n        category: 'Inputs',\n        type: {\n          summary: 'Record<string, string>'\n        }\n      }\n    },\n    ariaLabel: {\n      name: 'ariaLabel',\n      description: 'The aria label for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    ariaLive: {\n      name: 'ariaLive',\n      description: 'The aria live for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'off | polite | assertive | '\n        }\n      }\n    },\n    ariaDescribedBy: {\n      name: 'ariaDescribedBy',\n      description: 'The aria described by for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    type: {\n      name: 'Type',\n      description: 'The type of the button',\n      table: {\n        defaultValue: { summary: 'button' },\n        category: 'Inputs',\n        type: {\n          summary: 'button | submit | reset'\n        }\n      }\n    },\n    form: {\n      name: 'form',\n      description: 'The form linked with the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    name: {\n      name: 'name',\n      description: 'The name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertarget: {\n      name: 'popovertarget',\n      description: 'The popover target for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertargetaction: {\n      name: 'popovertargetaction',\n      description: 'The popover target action for the button',\n      table: {\n        defaultValue: { summary: 'null' },\n        category: 'Inputs',\n        type: {\n          summary: 'hide | show | toggle | null'\n        }\n      }\n    },\n    className: {\n      name: 'className',\n      description: 'The class name for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    focus: {\n      name: 'Focus',\n      description: 'Emitted when the button is focused',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    blur: {\n      name: 'Blur',\n      description: 'Emitted when the button loses focus',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    onClick: {\n      name: 'onClick',\n      description: 'Emitted when the button is clicked',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<Event>'\n        }\n      }\n    }\n  },\n  args: {\n    mode: 'dark',\n    size: 'medium',\n    disabled: false,\n    variant: 'filled',\n    value: 'Try me !!',\n    styles: {},\n    onClick: fn(),\n    focus: fn(),\n    blur: fn()\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n    <div\n      [class.dark]=\"mode === 'dark'\"\n      [class.light]=\"mode === 'light'\"\n    >\n      <luna-button\n        [size]=\"size\"\n        [disabled]=\"disabled\"\n        [variant]=\"variant\"\n        [styles]=\"styles\"\n        (onClick)=\"onClick($event)\"\n        (focus)=\"focus($event)\"\n        (blur)=\"blur($event)\"\n      >\n        {{value}}\n      </luna-button>\n    </div>\n    `\n  })\n\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\n  title: 'Components/Buttons/Icon Button',\n  component: LunaIconButtonComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'dark',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Button Icon component is designed to provide a streamlined, icon-only button for enhanced UI interactions. Whether used for compact actions, toolbars, or key visual elements, this component brings flexibility and modern design to your interfaces.\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaIconButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaIconButtonComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-icon-button\n  [size]=\"'medium'\"\n  [disabled]=\"false\"\n  [variant]=\"'filled'\"\n  (onClick)=\"onClick($event)\">\n    <svg\n      #icon fill=\"none\" viewBox=\"0 0 24 24\"\n      stroke-width=\"1.5\" stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\" stroke-linejoin=\"round\"\n        d=\"M6 18 18 6M6 6l12 12\"\n      />\n    </svg>\n</luna-icon-button>\n\\`\\`\\`\n        `\n      }\n    }\n  },\n  argTypes: {\n    mode: {\n      name: 'Mode',\n      options: ['light', 'dark'],\n      control: { type: 'select' },\n      description: 'The mode of the button',\n      table: {\n        defaultValue: { summary: 'dark' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'size',\n      options: ['small', 'medium', 'large'],\n      control: { type: 'select' },\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs',\n        type: {\n          summary: 'small | medium | large'\n        }\n      }\n    },\n    variant: {\n      name: 'variant',\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\n      control: \"select\",\n      description: 'The variant of the button',\n      table: {\n        defaultValue: { summary: 'filled' },\n        category: 'Inputs',\n        type: {\n          summary: 'filled | tonal | outlined | text | elevated'\n        }\n      }\n    },\n    disabled: {\n      name: 'disabled',\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs',\n        type: {\n          summary: 'boolean'\n        }\n      },\n    },\n    styles: {\n      name: 'styles',\n      control: 'object',\n      description: 'The styles to apply to the button',\n      table: {\n        defaultValue: { summary: '{}' },\n        category: 'Inputs',\n        type: {\n          summary: 'Record<string, string>'\n        }\n      }\n    },\n    ariaLabel: {\n      name: 'ariaLabel',\n      description: 'The aria label of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    ariaLive: {\n      name: 'ariaLive',\n      description: 'The aria live of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'off | polite | assertive | '\n        }\n      }\n    },\n    ariaDescribedBy: {\n      name: 'ariaDescribedBy',\n      description: 'The aria described by of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    type: {\n      name: 'type',\n      description: 'The type of the button',\n      table: {\n        defaultValue: { summary: 'button' },\n        category: 'Inputs',\n        type: {\n          summary: 'button | submit | reset'\n        }\n      }\n    },\n    form: {\n      name: 'form',\n      description: 'The form id linked with this button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    name: {\n      name: 'name',\n      description: 'The name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertarget: {\n      name: 'popovertarget',\n      description: 'The popover target of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertargetaction: {\n      name: 'popovertargetaction',\n      description: 'The popover target action of the button',\n      table: {\n        defaultValue: { summary: 'null' },\n        category: 'Inputs',\n        type: {\n          summary: 'hide | show | toggle | null'\n        }\n      }\n    },\n    className: {\n      name: 'className',\n      description: 'The class name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    focus: {\n      name: 'Focus',\n      description: 'Emitted when the button is focused',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    blur: {\n      name: 'Blur',\n      description: 'Emitted when the button loses focus',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    onClick: {\n      name: 'onClick',\n      description: 'Emitted when the button is clicked',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<Event>'\n        }\n      }\n    }\n  },\n  args: {\n    mode: 'dark',\n    size: 'medium',\n    disabled: false,\n    variant: 'filled',\n    styles: {},\n    onClick: fn(),\n    focus: fn(),\n    blur: fn()\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div\n        [class.dark]=\"mode === 'dark'\"\n        [class.light]=\"mode === 'light'\"\n      >\n        <luna-icon-button\n          [size]=\"size\"\n          [disabled]=\"disabled\"\n          [variant]=\"variant\"\n          [styles]=\"styles\"\n        >\n          <svg\n            #icon\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M6 18 18 6M6 6l12 12\"\n            />\n          </svg>\n        </luna-icon-button>\n      </div>\n    `\n  })\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\n  title: 'Components/Feedback/Alert',\n  component: LunaAlertComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'light',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Alert Component is designed to provide users with critical notifications and messages in an accessible and customizable way. Alerts are used to communicate important information, such as success, error, warnings, or informational messages. The component supports multiple styles, making it versatile and adaptable to different use cases.\n\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaIconButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaAlertComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-alert\n  [alertStyle]=\"alertStyle\"\n  [dismissible]=\"dismissible\"\n  [show]=\"show\"\n  [showIcon]=\"showIcon\"\n  [size]=\"size\"\n  [variant]=\"variant\"\n>\n  This is an alert\n</luna-alert>\n\\`\\`\\`\n        `\n      }\n    }\n  },\n  args: {\n    content: 'This is an alert',\n    alertStyle: 'box',\n    dismissible: false,\n    show: true,\n    showIcon: false,\n    size: 'medium',\n    variant: 'info',\n    dismissed: fn(),\n  },\n  argTypes: {\n    content: {\n      name: 'Content',\n      control: { type: 'text' },\n      description: 'The content of the alert',\n      table: {\n        defaultValue: { summary: 'This is an alert' },\n        category: 'Inputs'\n      }\n    },\n    alertStyle: {\n      name: 'Alert Style',\n      control: { type: 'select' },\n      description: 'The style of the alert, text or box',\n      options: ['text', 'box'],\n      table: {\n        defaultValue: { summary: 'box' },\n        category: 'Inputs'\n      }\n    },\n    dismissible: {\n      name: 'Dismissible',\n      control: { type: 'boolean' },\n      description: 'Whether the alert allows to be dismissible',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    show: {\n      name: 'Show alert',\n      control: { type: 'boolean' },\n      description: 'Whether the alert is visible',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    showIcon: {\n      name: 'Show Icon',\n      control: { type: 'boolean' },\n      description: 'Whether the alert shows an icon',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'Size',\n      control: { type: 'select' },\n      description: 'The size of the alert',\n      options: ['small', 'medium', 'large'],\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs'\n      }\n    },\n    variant: {\n      name: 'Variant',\n      control: { type: 'select' },\n      description: 'The variant of the alert',\n      options: ['info', 'success', 'warning', 'error'],\n      table: {\n        defaultValue: { summary: 'info' },\n        category: 'Inputs'\n      }\n    },\n    role: {\n      name: 'Role',\n      description: 'The role of the alert',\n      defaultValue: 'alert',\n      table: {\n        defaultValue: { summary: 'alert' },\n        category: 'Inputs'\n      }\n    },\n    dismissed: {\n      name: 'Dismissed',\n      description: 'Event emitted when the alert is dismissed',\n      table: {\n        category: 'Outputs'\n      }\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <luna-alert\n        [alertStyle]=\"alertStyle\"\n        [dismissible]=\"dismissible\"\n        [show]=\"show\"\n        [showIcon]=\"showIcon\"\n        [size]=\"size\"\n        [variant]=\"variant\"\n      >\n        {{ content }}\n      </luna-alert>\n    `,\n  })\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      title: 'Luna UI',\r\n    },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Success Alert',\n  args: {\n    variant: 'success'\n  }\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Warning Alert',\n  args: {\n    variant: 'warning'\n  }\n}"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  name: 'Alert with icon',\n  args: {\n    showIcon: true\n  }\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaButtonComponent>",
                "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaIconButtonComponent>",
                "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaAlertComponent>",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Default Button',\n  args: {\n    variant: 'filled',\n    size: 'medium'\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByTestId('luna-button')\n    const onClickFn = fn()\n    button.onclick = onClickFn();\n\n    await step('Click button', async () => {\n      await userEvent.click(button);\n    })\n    await waitFor(() => {\n      expect(button).toHaveFocus();\n      expect(onClickFn).toHaveBeenCalled();\n    });\n\n    await step('Blur button', async () => {\n      await userEvent.click(document.body);\n    })\n    await waitFor(() => expect(button).not.toHaveFocus());\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\n  title: 'Components/Buttons/Button',\n  component: LunaButtonComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'dark',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Button component is a versatile and highly customizable element designed to enhance the interactivity and accessibility of your user interfaces. Built with a focus on modern aesthetics and usability.\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaButtonComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-button\n  [size]=\"'medium'\"\n  [disabled]=\"false\"\n  [variant]=\"'filled'\"\n  (onClick)=\"onClick($event)\">\n  Click Me\n</luna-button>\n\\`\\`\\`\n\n        `\n      }\n    }\n  },\n  argTypes: {\n    mode: {\n      name: 'Mode',\n      options: ['light', 'dark'],\n      control: { type: 'select' },\n      description: 'The mode of the button',\n      table: {\n        defaultValue: { summary: 'dark' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'size',\n      options: ['small', 'medium', 'large'],\n      control: { type: 'select' },\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs',\n        type: {\n          summary: 'small | medium | large'\n        }\n      }\n    },\n    variant: {\n      name: 'variant',\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\n      control: \"select\",\n      description: 'The variant of the button',\n      table: {\n        defaultValue: { summary: 'filled' },\n        category: 'Inputs',\n        type: {\n          summary: 'filled | tonal | outlined | text | elevated'\n        }\n      }\n    },\n    disabled: {\n      name: 'disabled',\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs',\n        type: {\n          summary: 'boolean'\n        }\n      },\n    },\n    value: {\n      name: 'value',\n      control: 'text',\n      description: 'The text to display in the button',\n      table: {\n        defaultValue: { summary: 'Try me !!' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    styles: {\n      name: 'styles',\n      control: 'object',\n      description: 'The styles to apply to the button',\n      table: {\n        defaultValue: { summary: '{}' },\n        category: 'Inputs',\n        type: {\n          summary: 'Record<string, string>'\n        }\n      }\n    },\n    ariaLabel: {\n      name: 'ariaLabel',\n      description: 'The aria label for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    ariaLive: {\n      name: 'ariaLive',\n      description: 'The aria live for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'off | polite | assertive | '\n        }\n      }\n    },\n    ariaDescribedBy: {\n      name: 'ariaDescribedBy',\n      description: 'The aria described by for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    type: {\n      name: 'Type',\n      description: 'The type of the button',\n      table: {\n        defaultValue: { summary: 'button' },\n        category: 'Inputs',\n        type: {\n          summary: 'button | submit | reset'\n        }\n      }\n    },\n    form: {\n      name: 'form',\n      description: 'The form linked with the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    name: {\n      name: 'name',\n      description: 'The name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertarget: {\n      name: 'popovertarget',\n      description: 'The popover target for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertargetaction: {\n      name: 'popovertargetaction',\n      description: 'The popover target action for the button',\n      table: {\n        defaultValue: { summary: 'null' },\n        category: 'Inputs',\n        type: {\n          summary: 'hide | show | toggle | null'\n        }\n      }\n    },\n    className: {\n      name: 'className',\n      description: 'The class name for the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    focus: {\n      name: 'Focus',\n      description: 'Emitted when the button is focused',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    blur: {\n      name: 'Blur',\n      description: 'Emitted when the button loses focus',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    onClick: {\n      name: 'onClick',\n      description: 'Emitted when the button is clicked',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<Event>'\n        }\n      }\n    }\n  },\n  args: {\n    mode: 'dark',\n    size: 'medium',\n    disabled: false,\n    variant: 'filled',\n    value: 'Try me !!',\n    styles: {},\n    onClick: fn(),\n    focus: fn(),\n    blur: fn()\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n    <div\n      [class.dark]=\"mode === 'dark'\"\n      [class.light]=\"mode === 'light'\"\n    >\n      <luna-button\n        [size]=\"size\"\n        [disabled]=\"disabled\"\n        [variant]=\"variant\"\n        [styles]=\"styles\"\n        (onClick)=\"onClick($event)\"\n        (focus)=\"focus($event)\"\n        (blur)=\"blur($event)\"\n      >\n        {{value}}\n      </luna-button>\n    </div>\n    `\n  })\n\n}"
                }
            ],
            "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Default Button',\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n    const button = canvas.getByTestId('luna-icon-button')\n    const onClickFn = fn()\n    button.onclick = onClickFn();\n\n    await step('Click button', async () => {\n      await userEvent.click(button);\n    })\n    await waitFor(() => {\n      expect(button).toHaveFocus();\n      expect(onClickFn).toHaveBeenCalled();\n    });\n\n    await step('Blur button', async () => {\n      await userEvent.click(document.body);\n    })\n    await waitFor(() => expect(button).not.toHaveFocus());\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\n  title: 'Components/Buttons/Icon Button',\n  component: LunaIconButtonComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'dark',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Button Icon component is designed to provide a streamlined, icon-only button for enhanced UI interactions. Whether used for compact actions, toolbars, or key visual elements, this component brings flexibility and modern design to your interfaces.\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaIconButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaIconButtonComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-icon-button\n  [size]=\"'medium'\"\n  [disabled]=\"false\"\n  [variant]=\"'filled'\"\n  (onClick)=\"onClick($event)\">\n    <svg\n      #icon fill=\"none\" viewBox=\"0 0 24 24\"\n      stroke-width=\"1.5\" stroke=\"currentColor\"\n    >\n      <path\n        stroke-linecap=\"round\" stroke-linejoin=\"round\"\n        d=\"M6 18 18 6M6 6l12 12\"\n      />\n    </svg>\n</luna-icon-button>\n\\`\\`\\`\n        `\n      }\n    }\n  },\n  argTypes: {\n    mode: {\n      name: 'Mode',\n      options: ['light', 'dark'],\n      control: { type: 'select' },\n      description: 'The mode of the button',\n      table: {\n        defaultValue: { summary: 'dark' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'size',\n      options: ['small', 'medium', 'large'],\n      control: { type: 'select' },\n      description: 'The size of the button',\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs',\n        type: {\n          summary: 'small | medium | large'\n        }\n      }\n    },\n    variant: {\n      name: 'variant',\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\n      control: \"select\",\n      description: 'The variant of the button',\n      table: {\n        defaultValue: { summary: 'filled' },\n        category: 'Inputs',\n        type: {\n          summary: 'filled | tonal | outlined | text | elevated'\n        }\n      }\n    },\n    disabled: {\n      name: 'disabled',\n      control: { type: 'boolean' },\n      description: 'Whether the button is disabled',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs',\n        type: {\n          summary: 'boolean'\n        }\n      },\n    },\n    styles: {\n      name: 'styles',\n      control: 'object',\n      description: 'The styles to apply to the button',\n      table: {\n        defaultValue: { summary: '{}' },\n        category: 'Inputs',\n        type: {\n          summary: 'Record<string, string>'\n        }\n      }\n    },\n    ariaLabel: {\n      name: 'ariaLabel',\n      description: 'The aria label of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    ariaLive: {\n      name: 'ariaLive',\n      description: 'The aria live of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'off | polite | assertive | '\n        }\n      }\n    },\n    ariaDescribedBy: {\n      name: 'ariaDescribedBy',\n      description: 'The aria described by of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    type: {\n      name: 'type',\n      description: 'The type of the button',\n      table: {\n        defaultValue: { summary: 'button' },\n        category: 'Inputs',\n        type: {\n          summary: 'button | submit | reset'\n        }\n      }\n    },\n    form: {\n      name: 'form',\n      description: 'The form id linked with this button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    name: {\n      name: 'name',\n      description: 'The name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertarget: {\n      name: 'popovertarget',\n      description: 'The popover target of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    popovertargetaction: {\n      name: 'popovertargetaction',\n      description: 'The popover target action of the button',\n      table: {\n        defaultValue: { summary: 'null' },\n        category: 'Inputs',\n        type: {\n          summary: 'hide | show | toggle | null'\n        }\n      }\n    },\n    className: {\n      name: 'className',\n      description: 'The class name of the button',\n      table: {\n        defaultValue: { summary: '' },\n        category: 'Inputs',\n        type: {\n          summary: 'string'\n        }\n      }\n    },\n    focus: {\n      name: 'Focus',\n      description: 'Emitted when the button is focused',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    blur: {\n      name: 'Blur',\n      description: 'Emitted when the button loses focus',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<FocusEvent>'\n        }\n      }\n    },\n    onClick: {\n      name: 'onClick',\n      description: 'Emitted when the button is clicked',\n      table: {\n        category: 'Events',\n        type: {\n          summary: 'EventEmitter<Event>'\n        }\n      }\n    }\n  },\n  args: {\n    mode: 'dark',\n    size: 'medium',\n    disabled: false,\n    variant: 'filled',\n    styles: {},\n    onClick: fn(),\n    focus: fn(),\n    blur: fn()\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <div\n        [class.dark]=\"mode === 'dark'\"\n        [class.light]=\"mode === 'light'\"\n      >\n        <luna-icon-button\n          [size]=\"size\"\n          [disabled]=\"disabled\"\n          [variant]=\"variant\"\n          [styles]=\"styles\"\n        >\n          <svg\n            #icon\n            fill=\"none\"\n            viewBox=\"0 0 24 24\"\n            stroke-width=\"1.5\"\n            stroke=\"currentColor\"\n          >\n            <path\n              stroke-linecap=\"round\"\n              stroke-linejoin=\"round\"\n              d=\"M6 18 18 6M6 6l12 12\"\n            />\n          </svg>\n        </luna-icon-button>\n      </div>\n    `\n  })\n}"
                }
            ],
            "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Default Alert',\n}"
                },
                {
                    "name": "Dismissible",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Dismissible Alert',\n  args: {\n    dismissible: true\n  }\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Error Alert',\n  args: {\n    variant: 'error'\n  }\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\n  title: 'Components/Feedback/Alert',\n  component: LunaAlertComponent,\n  tags: ['autodocs', 'stable'],\n  parameters: {\n    layout: 'centered',\n    backgrounds: {\n      default: 'light',\n      values: [\n        { name: 'dark', value: 'var(--background-dark)' },\n        { name: 'light', value: 'var(--background-light)' },\n      ]\n    },\n    docs: {\n      description: {\n        component: `\nThe LunaUI Alert Component is designed to provide users with critical notifications and messages in an accessible and customizable way. Alerts are used to communicate important information, such as success, error, warnings, or informational messages. The component supports multiple styles, making it versatile and adaptable to different use cases.\n\n\n#### Installation\n\n\\`\\`\\`bash\nnpm i @lunaui/angular\n\\`\\`\\`\n\n#### Usage\n\n\\`\\`\\`typescript\nimport { LunaIconButtonComponent } from '@lunaui/angular';\n\n@component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [LunaAlertComponent],\n})\n\n\\`\\`\\`\n\n\\`\\`\\`html\n<luna-alert\n  [alertStyle]=\"alertStyle\"\n  [dismissible]=\"dismissible\"\n  [show]=\"show\"\n  [showIcon]=\"showIcon\"\n  [size]=\"size\"\n  [variant]=\"variant\"\n>\n  This is an alert\n</luna-alert>\n\\`\\`\\`\n        `\n      }\n    }\n  },\n  args: {\n    content: 'This is an alert',\n    alertStyle: 'box',\n    dismissible: false,\n    show: true,\n    showIcon: false,\n    size: 'medium',\n    variant: 'info',\n    dismissed: fn(),\n  },\n  argTypes: {\n    content: {\n      name: 'Content',\n      control: { type: 'text' },\n      description: 'The content of the alert',\n      table: {\n        defaultValue: { summary: 'This is an alert' },\n        category: 'Inputs'\n      }\n    },\n    alertStyle: {\n      name: 'Alert Style',\n      control: { type: 'select' },\n      description: 'The style of the alert, text or box',\n      options: ['text', 'box'],\n      table: {\n        defaultValue: { summary: 'box' },\n        category: 'Inputs'\n      }\n    },\n    dismissible: {\n      name: 'Dismissible',\n      control: { type: 'boolean' },\n      description: 'Whether the alert allows to be dismissible',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    show: {\n      name: 'Show alert',\n      control: { type: 'boolean' },\n      description: 'Whether the alert is visible',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    showIcon: {\n      name: 'Show Icon',\n      control: { type: 'boolean' },\n      description: 'Whether the alert shows an icon',\n      table: {\n        defaultValue: { summary: 'false' },\n        category: 'Inputs'\n      }\n    },\n    size: {\n      name: 'Size',\n      control: { type: 'select' },\n      description: 'The size of the alert',\n      options: ['small', 'medium', 'large'],\n      table: {\n        defaultValue: { summary: 'medium' },\n        category: 'Inputs'\n      }\n    },\n    variant: {\n      name: 'Variant',\n      control: { type: 'select' },\n      description: 'The variant of the alert',\n      options: ['info', 'success', 'warning', 'error'],\n      table: {\n        defaultValue: { summary: 'info' },\n        category: 'Inputs'\n      }\n    },\n    role: {\n      name: 'Role',\n      description: 'The role of the alert',\n      defaultValue: 'alert',\n      table: {\n        defaultValue: { summary: 'alert' },\n        category: 'Inputs'\n      }\n    },\n    dismissed: {\n      name: 'Dismissed',\n      description: 'Event emitted when the alert is dismissed',\n      table: {\n        category: 'Outputs'\n      }\n    }\n  },\n  render: (args) => ({\n    props: args,\n    template: `\n      <luna-alert\n        [alertStyle]=\"alertStyle\"\n        [dismissible]=\"dismissible\"\n        [show]=\"show\"\n        [showIcon]=\"showIcon\"\n        [size]=\"size\"\n        [variant]=\"variant\"\n      >\n        {{ content }}\n      </luna-alert>\n    `,\n  })\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Success Alert',\n  args: {\n    variant: 'success'\n  }\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Warning Alert',\n  args: {\n    variant: 'warning'\n  }\n}"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  name: 'Alert with icon',\n  args: {\n    showIcon: true\n  }\n}"
                }
            ],
            "projects/lunaui-angular/src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n  args: { onClick: fn() },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "projects/lunaui-angular/src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
                }
            ],
            "projects/lunaui-angular/src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/lunaui-angular/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      title: 'Luna UI',\r\n    },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/lunaui-angular/src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaButtonComponent>",
                    "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaIconButtonComponent>",
                    "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaAlertComponent>",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/lunaui-angular/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dismissible",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}