{
    "pipes": [],
    "interfaces": [
        {
            "name": "Props",
            "id": "interface-Props-1b75ba95193f04bce728bb674390963b873ab499137bd172629977e07975a8f0a18820cd1658d9acfce3e9b0d4d955995ac242d880196a820e173ea89c373b0b",
            "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from \"@storybook/angular\";\r\nimport { LunaButtonComponent } from \"./button.component\";\r\nimport { within, expect, userEvent, fn, waitFor } from \"@storybook/test\";\r\n\r\ninterface Props extends LunaButtonComponent {\r\n  mode: 'light' | 'dark'\r\n}\r\n\r\nconst meta: Meta<Props> = {\r\n  title: 'Components/Buttons/Button',\r\n  component: LunaButtonComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'dark',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Button component is a versatile and highly customizable element designed to enhance the interactivity and accessibility of your user interfaces. Built with a focus on modern aesthetics and usability.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaButtonComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-button>\r\n  Click Me\r\n</luna-button>\r\n\\`\\`\\`\r\n\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the button',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\r\n      control: \"select\",\r\n      description: 'The variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | tonal | outlined | text | elevated'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: { type: 'boolean' },\r\n      description: 'The disabled attribute makes an element (like a button, input, or select) inactive, preventing user interaction and excluding it from form submission.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      },\r\n    },\r\n    value: {\r\n      name: 'value',\r\n      control: 'text',\r\n      description: 'The value attribute specifies the initial data or content of an element, commonly used in form elements like <button>.',\r\n      table: {\r\n        defaultValue: { summary: 'Try me !!' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    styles: {\r\n      name: 'styles',\r\n      control: 'object',\r\n      description: 'The styles to apply to the button',\r\n      table: {\r\n        defaultValue: { summary: '{}' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'Record<string, string>'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: 'The aria-label attribute provides an accessible name for an element, allowing screen readers to describe it when there’s no visible label.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaLive: {\r\n      name: 'ariaLive',\r\n      description: 'The aria-live attribute announces dynamic content changes to screen readers, specifying the priority level (off, polite, or assertive) to control how updates are conveyed to users.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'off | polite | assertive | '\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute links an element to another element that provides additional descriptive information, helping screen readers announce supplementary context or guidance.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'Type',\r\n      description: 'The type attribute specifies the type of an element, commonly used in <button> (e.g., submit, reset) to define its behavior and format.',\r\n      table: {\r\n        defaultValue: { summary: 'button' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'button | submit | reset'\r\n        }\r\n      }\r\n    },\r\n    form: {\r\n      name: 'form',\r\n      description: 'The form attribute associates an element (like <input>, <button>) with a specific <form> by its id, allowing the element to be part of the form even if it’s located outside of it.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: 'The name attribute assigns an identifier to form elements (like <input>, <select>, <textarea>) for server-side data submission, allowing data to be referenced by this name when the form is submitted.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertarget: {\r\n      name: 'popovertarget',\r\n      description: 'The popovertarget attribute specifies the id of an element that should be displayed as a popover, linking the triggering element to the popover content for display on interaction.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertargetaction: {\r\n      name: 'popovertargetaction',\r\n      description: 'The popovertargetaction attribute defines the action that triggers the popover linked by popovertarget (e.g., show, hide, toggle), controlling how and when the popover appears.',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'hide | show | toggle | null'\r\n        }\r\n      }\r\n    },\r\n    className: {\r\n      name: 'className',\r\n      description: 'The class name for the button',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the button is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the button loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    onClick: {\r\n      name: 'onClick',\r\n      description: 'Emitted when the button is clicked',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'dark',\r\n    size: 'medium',\r\n    disabled: false,\r\n    variant: 'filled',\r\n    value: 'Try me !!',\r\n    styles: {},\r\n    onClick: fn(),\r\n    focus: fn(),\r\n    blur: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n    <div\r\n      [class.dark]=\"mode === 'dark'\"\r\n      [class.light]=\"mode === 'light'\"\r\n    >\r\n      <luna-button\r\n        [size]=\"size\"\r\n        [disabled]=\"disabled\"\r\n        [variant]=\"variant\"\r\n        [styles]=\"styles\"\r\n        (onClick)=\"onClick($event)\"\r\n        (focus)=\"focus($event)\"\r\n        (blur)=\"blur($event)\"\r\n      >\r\n        {{value}}\r\n      </luna-button>\r\n    </div>\r\n    `\r\n  })\r\n\r\n}\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<LunaButtonComponent>\r\n\r\nexport const Default: Story = {\r\n  name: 'Default Button',\r\n  args: {\r\n    variant: 'filled',\r\n    size: 'medium'\r\n  },\r\n  play: async ({ canvasElement, step }) => {\r\n    const canvas = within(canvasElement);\r\n    const button = canvas.getByTestId('luna-button')\r\n    const onClickFn = fn()\r\n    button.onclick = onClickFn();\r\n\r\n    await step('Click button', async () => {\r\n      await userEvent.click(button);\r\n    })\r\n    await waitFor(() => {\r\n      expect(button).toHaveFocus();\r\n      expect(onClickFn).toHaveBeenCalled();\r\n    });\r\n\r\n    await step('Blur button', async () => {\r\n      await userEvent.click(document.body);\r\n    })\r\n    await waitFor(() => expect(button).not.toHaveFocus());\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaButtonComponent"
            ]
        },
        {
            "name": "Props",
            "id": "interface-Props-455264012466307c85b033def418b0329c1fc1992a5c2561f7df7865c7de87e7689474449fabc5808cbd1bfdc388768d5f02e27c01e46edf9348f50f4a168413-1",
            "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from \"@storybook/angular\";\r\nimport { LunaIconButtonComponent } from \"./icon-button.component\";\r\nimport { within, expect, userEvent, fn, waitFor } from \"@storybook/test\";\r\n\r\ninterface Props extends LunaIconButtonComponent {\r\n  mode: 'light' | 'dark'\r\n}\r\n\r\nconst meta: Meta<Props> = {\r\n  title: 'Components/Buttons/Icon Button',\r\n  component: LunaIconButtonComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'dark',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Button Icon component is designed to provide a streamlined, icon-only button for enhanced UI interactions. Whether used for compact actions, toolbars, or key visual elements, this component brings flexibility and modern design to your interfaces.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaIconButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaIconButtonComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-icon-button>\r\n    <svg\r\n      #icon fill=\"none\" viewBox=\"0 0 24 24\"\r\n      stroke-width=\"1.5\" stroke=\"currentColor\"\r\n    >\r\n      <path\r\n        stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n        d=\"M6 18 18 6M6 6l12 12\"\r\n      />\r\n    </svg>\r\n</luna-icon-button>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the button',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\r\n      control: \"select\",\r\n      description: 'The variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | tonal | outlined | text | elevated'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: { type: 'boolean' },\r\n      description: 'The disabled attribute makes an element (e.g., button, input) non-interactive, preventing user actions and disabling focus.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      },\r\n    },\r\n    styles: {\r\n      name: 'styles',\r\n      control: 'object',\r\n      description: 'The styles to apply to the button',\r\n      table: {\r\n        defaultValue: { summary: '{}' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'Record<string, string>'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: 'The aria-label attribute provides an accessible name for an element, allowing screen readers to describe it when there’s no visible label.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaLive: {\r\n      name: 'ariaLive',\r\n      description: 'The aria-live attribute announces dynamic content changes to screen readers, specifying the priority level (off, polite, or assertive) to control how updates are conveyed to users.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'off | polite | assertive | '\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute links an element to another element that provides additional descriptive information, helping screen readers announce supplementary context or guidance.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'type',\r\n      description: 'The type attribute specifies the type of an element, commonly used in <button> (e.g., submit, reset) to define its behavior and format.',\r\n      table: {\r\n        defaultValue: { summary: 'button' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'button | submit | reset'\r\n        }\r\n      }\r\n    },\r\n    form: {\r\n      name: 'form',\r\n      description: 'The form attribute associates an element (like <input>, <button>) with a specific <form> by its id, allowing the element to be part of the form even if it’s located outside of it.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: 'The name attribute assigns an identifier to form elements (like <input>, <select>, <textarea>) for server-side data submission, allowing data to be referenced by this name when the form is submitted.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertarget: {\r\n      name: 'popovertarget',\r\n      description: 'The popovertarget attribute specifies the id of an element that should be displayed as a popover, linking the triggering element to the popover content for display on interaction.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertargetaction: {\r\n      name: 'popovertargetaction',\r\n      description: 'The popovertargetaction attribute defines the action that triggers the popover linked by popovertarget (e.g., show, hide, toggle), controlling how and when the popover appears.',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'hide | show | toggle | null'\r\n        }\r\n      }\r\n    },\r\n    className: {\r\n      name: 'className',\r\n      description: 'The class name of the button',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the button is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the button loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    onClick: {\r\n      name: 'onClick',\r\n      description: 'Emitted when the button is clicked',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'dark',\r\n    size: 'medium',\r\n    disabled: false,\r\n    variant: 'filled',\r\n    styles: {},\r\n    onClick: fn(),\r\n    focus: fn(),\r\n    blur: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div\r\n        [class.dark]=\"mode === 'dark'\"\r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n        <luna-icon-button\r\n          [size]=\"size\"\r\n          [disabled]=\"disabled\"\r\n          [variant]=\"variant\"\r\n          [styles]=\"styles\"\r\n          (onClick)=\"onClick($event)\"\r\n          (focus)=\"focus($event)\"\r\n          (blur)=\"blur($event)\"\r\n        >\r\n          <svg\r\n            #icon\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke-width=\"1.5\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              d=\"M6 18 18 6M6 6l12 12\"\r\n            />\r\n          </svg>\r\n        </luna-icon-button>\r\n      </div>\r\n    `\r\n  })\r\n}\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<LunaIconButtonComponent>;\r\n\r\nexport const Default: Story = {\r\n  name: 'Default Button',\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  play: async ({ canvasElement, step }) => {\r\n    const canvas = within(canvasElement);\r\n    const button = canvas.getByTestId('luna-icon-button')\r\n    const onClickFn = fn()\r\n    button.onclick = onClickFn();\r\n\r\n    await step('Click button', async () => {\r\n      await userEvent.click(button);\r\n    })\r\n    await waitFor(() => {\r\n      expect(button).toHaveFocus();\r\n      expect(onClickFn).toHaveBeenCalled();\r\n    });\r\n\r\n    await step('Blur button', async () => {\r\n      await userEvent.click(document.body);\r\n    })\r\n    await waitFor(() => expect(button).not.toHaveFocus());\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaIconButtonComponent"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "Props-1"
        },
        {
            "name": "Props",
            "id": "interface-Props-e8aea0696c00eea4692b06bf8f8341d3e960d4e17938b01d66597acce2e8d524a111b39626a176a5247369dc7d979ffc6bc38e110c62868758d75ceacd2e8660-2",
            "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, StoryObj } from \"@storybook/angular\";\r\nimport { LunaAlertComponent } from \"./alert.component\";\r\nimport { fn } from \"@storybook/test\";\r\n\r\ninterface Props extends LunaAlertComponent {\r\n  content: string;\r\n}\r\n\r\nconst meta: Meta<Props> = {\r\n  title: 'Components/Feedback/Alert',\r\n  component: LunaAlertComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Alert Component is designed to provide users with critical notifications and messages in an accessible and customizable way. Alerts are used to communicate important information, such as success, error, warnings, or informational messages. The component supports multiple styles, making it versatile and adaptable to different use cases.\r\n\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaIconButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaAlertComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-alert>\r\n  This is an alert\r\n</luna-alert>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    content: 'This is an alert',\r\n    alertStyle: 'box',\r\n    dismissible: false,\r\n    show: true,\r\n    showIcon: false,\r\n    size: 'medium',\r\n    variant: 'info',\r\n    dismissed: fn(),\r\n    styles: {}\r\n  },\r\n  argTypes: {\r\n    content: {\r\n      name: 'Content',\r\n      control: { type: 'text' },\r\n      description: 'The content of the alert',\r\n      table: {\r\n        defaultValue: { summary: 'This is an alert' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    alertStyle: {\r\n      name: 'Alert Style',\r\n      control: { type: 'select' },\r\n      description: 'The style of the alert, text or box',\r\n      options: ['text', 'box'],\r\n      table: {\r\n        defaultValue: { summary: 'box' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    dismissible: {\r\n      name: 'Dismissible',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert allows to be dismissible',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    show: {\r\n      name: 'Show alert',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert is visible',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    showIcon: {\r\n      name: 'Show Icon',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert shows an icon',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'Size',\r\n      control: { type: 'select' },\r\n      description: 'The size of the alert',\r\n      options: ['small', 'medium', 'large'],\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'Variant',\r\n      control: { type: 'select' },\r\n      description: 'The variant of the alert',\r\n      options: ['info', 'success', 'warning', 'error'],\r\n      table: {\r\n        defaultValue: { summary: 'info' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    role: {\r\n      name: 'Role',\r\n      description: 'The role attribute defines the purpose of an element, helping assistive technologies understand its function (e.g., button, navigation).',\r\n      defaultValue: 'alert',\r\n      table: {\r\n        defaultValue: { summary: 'alert' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    className: {\r\n      name: 'Class Name',\r\n      description: 'Additional CSS classes to add to the alert',\r\n      table: {\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    styles: {\r\n      name: 'Styles',\r\n      control: { type: 'object' },\r\n      description: 'Additional inline styles to add to the alert',\r\n      table: {\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    dismissed: {\r\n      name: 'Dismissed',\r\n      description: 'Event emitted when the alert is dismissed',\r\n      table: {\r\n        category: 'Outputs'\r\n      }\r\n    }\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <luna-alert\r\n        [alertStyle]=\"alertStyle\"\r\n        [dismissible]=\"dismissible\"\r\n        [show]=\"show\"\r\n        [showIcon]=\"showIcon\"\r\n        [size]=\"size\"\r\n        [variant]=\"variant\"\r\n        [styles]=\"styles\"\r\n        (dismissed)=\"dismissed()\"\r\n      >\r\n        {{ content }}\r\n      </luna-alert>\r\n    `,\r\n  })\r\n}\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<LunaAlertComponent>;\r\n\r\nexport const Default: Story = {\r\n  name: 'Default Alert',\r\n}\r\n\r\nexport const Dismissible: Story = {\r\n  name: 'Dismissible Alert',\r\n  args: {\r\n    dismissible: true\r\n  }\r\n}\r\n\r\nexport const WithIcon: Story = {\r\n  name: 'Alert with icon',\r\n  args: {\r\n    showIcon: true\r\n  }\r\n}\r\n\r\nexport const Warning: Story = {\r\n  name: 'Warning Alert',\r\n  args: {\r\n    variant: 'warning'\r\n  }\r\n}\r\nexport const Error: Story = {\r\n  name: 'Error Alert',\r\n  args: {\r\n    variant: 'error'\r\n  }\r\n}\r\nexport const Success: Story = {\r\n  name: 'Success Alert',\r\n  args: {\r\n    variant: 'success'\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaAlertComponent"
            ],
            "isDuplicate": true,
            "duplicateId": 2,
            "duplicateName": "Props-2"
        },
        {
            "name": "Props",
            "id": "interface-Props-933123cdd3c4dc252c1735656d4187ccc14ca931f4b9347db9e6891180236756a35c0ad695646642e9c214d63d53f209db42c9757a61392ca58bfc14259b6ceb-3",
            "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, moduleMetadata, StoryObj } from \"@storybook/angular\";\r\nimport { LunaInputComponent } from \"./input.component\";\r\nimport { FormatterDirective, OnlyNumbersDirective, ToLowercaseDirective, ToUppercaseDirective } from \"../../directives/public-api\";\r\n\r\ninterface Props extends LunaInputComponent {\r\n  mode: 'light' | 'dark'\r\n}\r\n\r\nconst meta: Meta<Props> = {\r\n  title: 'Components/Forms/Input',\r\n  component: LunaInputComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormatterDirective, ToUppercaseDirective, ToLowercaseDirective, OnlyNumbersDirective]\r\n    })\r\n  ],\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Input Component provides a highly customizable, accessible, and responsive input field designed for various user interactions. Built with flexibility in mind, this component offers support for multiple input styles—such as filled, outlined, and underlined—to suit different design needs. The component accommodates essential form states, including default, focused, hover, active, disabled, and error, allowing developers to create polished and user-friendly interfaces.\r\n\r\nThe LunaUI Input Component is fully compatible with Angular Reactive Forms, making integration seamless for complex form handling. It includes a robust set of accessibility features, including ARIA support, clear focus indicators, and compatibility with screen readers, ensuring an inclusive experience for all users. With customizable helper texts, error messages, placeholder support, and optional icons, this component provides an efficient, comprehensive solution for input needs across a wide range of applications.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaInputComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaInputComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-input>\r\n</luna-input>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'light',\r\n    label: 'Test label',\r\n    size: 'medium',\r\n    variant: 'outlined',\r\n    error: false,\r\n    disabled: false,\r\n    placeholder: '',\r\n    helperText: '',\r\n    helperTextType: 'info',\r\n    defaultValue: '',\r\n    attrSize: 20,\r\n    allowWhiteSpaces: true,\r\n    transformToUppercase: false,\r\n    transformToLowercase: false,\r\n    numbersOnly: false,\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    label: {\r\n      name: 'label',\r\n      control: 'text',\r\n      description: 'The label of the input',\r\n      table: {\r\n        defaultValue: { summary: 'Try me !!' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the input',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'outlined', 'underlined'],\r\n      control: { type: 'select' },\r\n      description: 'The variant of the input',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | outlined | underlined'\r\n        }\r\n      }\r\n    },\r\n    error: {\r\n      name: 'error',\r\n      control: 'boolean',\r\n      description: 'The error state of the input',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: 'boolean',\r\n      description: 'The disabled attribute makes an input field or interactive element non-interactive. It prevents users from interacting with the element, submitting its data, or focusing on it. Disabled elements appear dimmed in most browsers to indicate they are inactive.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: \"The aria-label attribute provides an accessible name for an element, making it readable to screen readers. It’s useful for elements that don’t have visible labels, such as icons or buttons with only an icon, ensuring all users understand the element's purpose.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute specifies the id of one or more elements that describe the input, enhancing accessibility by providing additional context for screen readers. It’s commonly used to link an input field to helper text or error messages, helping users understand the input’s purpose or requirements.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    id: {\r\n      name: 'id',\r\n      description: 'The id attribute assigns a unique identifier to an HTML element. It’s used to target the element with CSS or JavaScript and to link labels to form elements, improving accessibility',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    placeholder: {\r\n      name: 'placeholder',\r\n      control: 'text',\r\n      description: \"The placeholder attribute provides hint text displayed inside the input field when it's empty, giving users an example or suggestion for what to enter.This text disappears when the user starts typing.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    helperText: {\r\n      name: 'helperText',\r\n      control: 'text',\r\n      description: 'The helper text of the input',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    helperTextType: {\r\n      name: 'helperTextType',\r\n      options: ['info', 'error', 'success', 'warning'],\r\n      control: { type: 'select' },\r\n      description: 'The helper text type of the input',\r\n      table: {\r\n        defaultValue: { summary: 'info' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'info | error | success | warning'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'type',\r\n      description: \"The type attribute specifies the input field's data type and behavior, such as text, number, email, password, date, etc. Each type controls how the input displays and restricts the data format it accepts.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: \"The name attribute specifies a unique identifier for the form field when submitting form data. It acts as the key in the form data payload sent to the server, helping identify each input's value on the backend.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    minlength: {\r\n      name: 'minlength',\r\n      description: 'The minlength attribute sets the minimum number of characters required for a valid input in a text field. This helps ensure users enter enough characters before submitting the form.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    maxlength: {\r\n      name: 'maxlength',\r\n      description: 'The maxlength attribute sets the maximum number of characters that a user can enter in an input field. It is commonly used with text inputs to limit the length of the input.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    pattern: {\r\n      name: 'pattern',\r\n      description: 'The pattern attribute specifies a regular expression that the input value must match for it to be considered valid. This is commonly used for text inputs to enforce specific formats, like phone numbers or postal codes.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    readonly: {\r\n      name: 'readonly',\r\n      description: 'The readonly attribute makes an input field non-editable while allowing the user to focus on it and select the text. Unlike disabled, a readonly input can still be submitted with form data.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    defaultValue: {\r\n      name: 'value',\r\n      control: 'text',\r\n      description: 'The value attribute sets the initial or default value of an input field. For input types like text, number, range, etc., it defines the pre-filled value displayed to the user. It can also dynamically update based on user input or scripts.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    attrSize: {\r\n      name: 'attrSize',\r\n      control: 'number',\r\n      description: 'The size of the input',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    min: {\r\n      name: 'min',\r\n      description: 'The min attribute sets the minimum allowable value for input types like number, date, or range. It prevents users from entering a value lower than the specified minimum.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    max: {\r\n      name: 'max',\r\n      description: 'The max attribute sets the maximum allowable value for input types like number, date, or range. It prevents users from entering a value higher than the specified maximum.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    step: {\r\n      name: 'step',\r\n      description: 'The step attribute defines the incremental value for input types like number, range, date, or time. It controls the intervals allowed when adjusting the input value',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    list: {\r\n      name: 'list',\r\n      description: 'The list attribute links an input to a <datalist> element, offering predefined options that users can select from or type to match, enhancing autocomplete functionality.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    allowWhiteSpaces: {\r\n      name: 'allowWhiteSpaces',\r\n      control: 'boolean',\r\n      description: 'The allowWhiteSpaces attribute allows or disallows whitespace characters in the input value.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    transformToUppercase: {\r\n      name: 'transformToUppercase',\r\n      control: 'boolean',\r\n      description: 'The transformToUppercase attribute transforms the input value to uppercase characters.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    transformToLowercase: {\r\n      name: 'transformToLowercase',\r\n      control: 'boolean',\r\n      description: 'The transformToLowercase attribute transforms the input value to lowercase characters.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    numbersOnly: {\r\n      name: 'numbersOnly',\r\n      control: 'boolean',\r\n      description: 'The numbersOnly attribute restricts the input to numeric values only.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    format: {\r\n      name: 'format',\r\n      description: 'The format attribute formats the input value according to a specified pattern or mask',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'phone | currency | creditCard | null'\r\n        }\r\n      }\r\n    },\r\n    formatEventHandler: {\r\n      name: 'formatEventHandler',\r\n      description: 'The formatEventHandler attribute is a function that handles the formatting of the input value based on the specified format.',\r\n      table: {\r\n        defaultValue: { summary: 'input' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'input | change'\r\n        }\r\n      }\r\n    },\r\n    formatCurrency: {\r\n      name: 'formatCurrency',\r\n      description: 'The formatCurrency attribute specifies the currency code for currency formatting.',\r\n      table: {\r\n        defaultValue: { summary: 'USD' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    formatDecimals: {\r\n      name: 'formatDecimals',\r\n      description: 'The formatDecimals attribute specifies the number of decimal places for currency formatting.',\r\n      table: {\r\n        defaultValue: { summary: '2' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    formatCurrencyDisplay: {\r\n      name: 'formatCurrencyDisplay',\r\n      description: 'The formatCurrencyDisplay attribute specifies how the currency should be displayed (symbol, code, or name).',\r\n      table: {\r\n        defaultValue: { summary: 'symbol' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'symbol | code | name | narrowSymbol'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the input is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the input loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    input: {\r\n      name: 'Input',\r\n      description: 'Emitted when the input value changes',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    },\r\n    change: {\r\n      name: 'Change',\r\n      description: 'Emitted when the input value changes and the input loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div\r\n        [class.dark]=\"mode === 'dark'\"\r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n        <luna-input\r\n          [label]=\"label\"\r\n          [size]=\"size\"\r\n          [variant]=\"variant\"\r\n          [error]=\"error\"\r\n          [disabled]=\"disabled\"\r\n          [placeholder]=\"placeholder\"\r\n          [helperText]=\"helperText\"\r\n          [defaultValue]=\"defaultValue\"\r\n          [attrSize]=\"attrSize\"\r\n          [allowWhiteSpaces]=\"allowWhiteSpaces\"\r\n          [transformToUppercase]=\"transformToUppercase\"\r\n          [transformToLowercase]=\"transformToLowercase\"\r\n          [numbersOnly]=\"numbersOnly\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<LunaInputComponent>;\r\n\r\nexport const Default: Story = {\r\n  name: 'Default',\r\n}\r\nexport const InputNoLable: Story = {\r\n  name: 'Input without label',\r\n  args: {\r\n    label: '',\r\n    placeholder: 'Enter your name'\r\n  }\r\n}\r\nexport const InputError: Story = {\r\n  name: 'Input with error',\r\n  args: {\r\n    error: true,\r\n  }\r\n}\r\nexport const InputFilled: Story = {\r\n  name: 'Input filled',\r\n  args: {\r\n    variant: 'filled',\r\n  }\r\n}\r\nexport const InputUnderline: Story = {\r\n  name: 'Input outlined',\r\n  args: {\r\n    variant: 'underlined',\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaInputComponent"
            ],
            "isDuplicate": true,
            "duplicateId": 3,
            "duplicateName": "Props-3"
        },
        {
            "name": "Props",
            "id": "interface-Props-03ebcc7592a5cda06c8d4159d599204c2f36f2dedd9c749d79e4e2b5a7d1b6f8bdab5f4cc0417e50c132945bcb0d12552f6896324bcd9e3ae2281b36d675fe49-4",
            "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Meta, moduleMetadata, StoryObj } from \"@storybook/angular\";\r\nimport { LunaPasswordInputComponent } from \"./password-input.component\";\r\nimport { FormatterDirective, OnlyNumbersDirective, ToLowercaseDirective, ToUppercaseDirective } from \"../../directives/public-api\";\r\n\r\ninterface Props extends LunaPasswordInputComponent {\r\n  mode: 'light' | 'dark'\r\n}\r\n\r\nconst meta: Meta<Props> = {\r\n  title: 'Components/Forms/Password Input',\r\n  component: LunaPasswordInputComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormatterDirective, ToUppercaseDirective, ToLowercaseDirective, OnlyNumbersDirective]\r\n    })\r\n  ],\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Password Input Component provides a secure and user-friendly way for users to enter and manage password data. Designed with accessibility and customization in mind, this component supports features like password visibility toggling, strength indicators, and validation messages. The component is adaptable to various styles and can seamlessly integrate with Angular forms, ensuring flexibility for both simple and complex form requirements.\r\n        \r\n        \r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaPasswordInputComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaPasswordInputComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\r\n\\`\\`\\`html\r\n<luna-password-input>\r\n</luna-password-input>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {},\r\n  argTypes: {},\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div \r\n        [class.dark]=\"mode === 'dark'\"  \r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n      \r\n      </div>\r\n    `\r\n  })\r\n}\r\n\r\nexport default meta;\r\n\r\ntype Story = StoryObj<LunaPasswordInputComponent>;\r\n\r\nexport const Default: Story = {\r\n  name: 'Default',\r\n}",
            "properties": [
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"light\" | \"dark\"",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LunaPasswordInputComponent"
            ],
            "isDuplicate": true,
            "duplicateId": 4,
            "duplicateName": "Props-4"
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Default Button',\r\n  args: {\r\n    variant: 'filled',\r\n    size: 'medium'\r\n  },\r\n  play: async ({ canvasElement, step }) => {\r\n    const canvas = within(canvasElement);\r\n    const button = canvas.getByTestId('luna-button')\r\n    const onClickFn = fn()\r\n    button.onclick = onClickFn();\r\n\r\n    await step('Click button', async () => {\r\n      await userEvent.click(button);\r\n    })\r\n    await waitFor(() => {\r\n      expect(button).toHaveFocus();\r\n      expect(onClickFn).toHaveBeenCalled();\r\n    });\r\n\r\n    await step('Blur button', async () => {\r\n      await userEvent.click(document.body);\r\n    })\r\n    await waitFor(() => expect(button).not.toHaveFocus());\r\n  }\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Default Button',\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  play: async ({ canvasElement, step }) => {\r\n    const canvas = within(canvasElement);\r\n    const button = canvas.getByTestId('luna-icon-button')\r\n    const onClickFn = fn()\r\n    button.onclick = onClickFn();\r\n\r\n    await step('Click button', async () => {\r\n      await userEvent.click(button);\r\n    })\r\n    await waitFor(() => {\r\n      expect(button).toHaveFocus();\r\n      expect(onClickFn).toHaveBeenCalled();\r\n    });\r\n\r\n    await step('Blur button', async () => {\r\n      await userEvent.click(document.body);\r\n    })\r\n    await waitFor(() => expect(button).not.toHaveFocus());\r\n  }\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Default Alert',\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Default',\r\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Default',\r\n}"
            },
            {
                "name": "Dismissible",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Dismissible Alert',\r\n  args: {\r\n    dismissible: true\r\n  }\r\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Error Alert',\r\n  args: {\r\n    variant: 'error'\r\n  }\r\n}"
            },
            {
                "name": "InputError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Input with error',\r\n  args: {\r\n    error: true,\r\n  }\r\n}"
            },
            {
                "name": "InputFilled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Input filled',\r\n  args: {\r\n    variant: 'filled',\r\n  }\r\n}"
            },
            {
                "name": "InputNoLable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Input without label',\r\n  args: {\r\n    label: '',\r\n    placeholder: 'Enter your name'\r\n  }\r\n}"
            },
            {
                "name": "InputUnderline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Input outlined',\r\n  args: {\r\n    variant: 'underlined',\r\n  }\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n  args: { onClick: fn() },\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<HeaderComponent>",
                "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<PageComponent>",
                "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\r\n  title: 'Components/Buttons/Button',\r\n  component: LunaButtonComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'dark',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Button component is a versatile and highly customizable element designed to enhance the interactivity and accessibility of your user interfaces. Built with a focus on modern aesthetics and usability.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaButtonComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-button>\r\n  Click Me\r\n</luna-button>\r\n\\`\\`\\`\r\n\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the button',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\r\n      control: \"select\",\r\n      description: 'The variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | tonal | outlined | text | elevated'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: { type: 'boolean' },\r\n      description: 'The disabled attribute makes an element (like a button, input, or select) inactive, preventing user interaction and excluding it from form submission.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      },\r\n    },\r\n    value: {\r\n      name: 'value',\r\n      control: 'text',\r\n      description: 'The value attribute specifies the initial data or content of an element, commonly used in form elements like <button>.',\r\n      table: {\r\n        defaultValue: { summary: 'Try me !!' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    styles: {\r\n      name: 'styles',\r\n      control: 'object',\r\n      description: 'The styles to apply to the button',\r\n      table: {\r\n        defaultValue: { summary: '{}' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'Record<string, string>'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: 'The aria-label attribute provides an accessible name for an element, allowing screen readers to describe it when there’s no visible label.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaLive: {\r\n      name: 'ariaLive',\r\n      description: 'The aria-live attribute announces dynamic content changes to screen readers, specifying the priority level (off, polite, or assertive) to control how updates are conveyed to users.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'off | polite | assertive | '\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute links an element to another element that provides additional descriptive information, helping screen readers announce supplementary context or guidance.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'Type',\r\n      description: 'The type attribute specifies the type of an element, commonly used in <button> (e.g., submit, reset) to define its behavior and format.',\r\n      table: {\r\n        defaultValue: { summary: 'button' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'button | submit | reset'\r\n        }\r\n      }\r\n    },\r\n    form: {\r\n      name: 'form',\r\n      description: 'The form attribute associates an element (like <input>, <button>) with a specific <form> by its id, allowing the element to be part of the form even if it’s located outside of it.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: 'The name attribute assigns an identifier to form elements (like <input>, <select>, <textarea>) for server-side data submission, allowing data to be referenced by this name when the form is submitted.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertarget: {\r\n      name: 'popovertarget',\r\n      description: 'The popovertarget attribute specifies the id of an element that should be displayed as a popover, linking the triggering element to the popover content for display on interaction.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertargetaction: {\r\n      name: 'popovertargetaction',\r\n      description: 'The popovertargetaction attribute defines the action that triggers the popover linked by popovertarget (e.g., show, hide, toggle), controlling how and when the popover appears.',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'hide | show | toggle | null'\r\n        }\r\n      }\r\n    },\r\n    className: {\r\n      name: 'className',\r\n      description: 'The class name for the button',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the button is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the button loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    onClick: {\r\n      name: 'onClick',\r\n      description: 'Emitted when the button is clicked',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'dark',\r\n    size: 'medium',\r\n    disabled: false,\r\n    variant: 'filled',\r\n    value: 'Try me !!',\r\n    styles: {},\r\n    onClick: fn(),\r\n    focus: fn(),\r\n    blur: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n    <div\r\n      [class.dark]=\"mode === 'dark'\"\r\n      [class.light]=\"mode === 'light'\"\r\n    >\r\n      <luna-button\r\n        [size]=\"size\"\r\n        [disabled]=\"disabled\"\r\n        [variant]=\"variant\"\r\n        [styles]=\"styles\"\r\n        (onClick)=\"onClick($event)\"\r\n        (focus)=\"focus($event)\"\r\n        (blur)=\"blur($event)\"\r\n      >\r\n        {{value}}\r\n      </luna-button>\r\n    </div>\r\n    `\r\n  })\r\n\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\r\n  title: 'Components/Buttons/Icon Button',\r\n  component: LunaIconButtonComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'dark',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Button Icon component is designed to provide a streamlined, icon-only button for enhanced UI interactions. Whether used for compact actions, toolbars, or key visual elements, this component brings flexibility and modern design to your interfaces.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaIconButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaIconButtonComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-icon-button>\r\n    <svg\r\n      #icon fill=\"none\" viewBox=\"0 0 24 24\"\r\n      stroke-width=\"1.5\" stroke=\"currentColor\"\r\n    >\r\n      <path\r\n        stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n        d=\"M6 18 18 6M6 6l12 12\"\r\n      />\r\n    </svg>\r\n</luna-icon-button>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the button',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\r\n      control: \"select\",\r\n      description: 'The variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | tonal | outlined | text | elevated'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: { type: 'boolean' },\r\n      description: 'The disabled attribute makes an element (e.g., button, input) non-interactive, preventing user actions and disabling focus.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      },\r\n    },\r\n    styles: {\r\n      name: 'styles',\r\n      control: 'object',\r\n      description: 'The styles to apply to the button',\r\n      table: {\r\n        defaultValue: { summary: '{}' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'Record<string, string>'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: 'The aria-label attribute provides an accessible name for an element, allowing screen readers to describe it when there’s no visible label.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaLive: {\r\n      name: 'ariaLive',\r\n      description: 'The aria-live attribute announces dynamic content changes to screen readers, specifying the priority level (off, polite, or assertive) to control how updates are conveyed to users.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'off | polite | assertive | '\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute links an element to another element that provides additional descriptive information, helping screen readers announce supplementary context or guidance.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'type',\r\n      description: 'The type attribute specifies the type of an element, commonly used in <button> (e.g., submit, reset) to define its behavior and format.',\r\n      table: {\r\n        defaultValue: { summary: 'button' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'button | submit | reset'\r\n        }\r\n      }\r\n    },\r\n    form: {\r\n      name: 'form',\r\n      description: 'The form attribute associates an element (like <input>, <button>) with a specific <form> by its id, allowing the element to be part of the form even if it’s located outside of it.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: 'The name attribute assigns an identifier to form elements (like <input>, <select>, <textarea>) for server-side data submission, allowing data to be referenced by this name when the form is submitted.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertarget: {\r\n      name: 'popovertarget',\r\n      description: 'The popovertarget attribute specifies the id of an element that should be displayed as a popover, linking the triggering element to the popover content for display on interaction.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertargetaction: {\r\n      name: 'popovertargetaction',\r\n      description: 'The popovertargetaction attribute defines the action that triggers the popover linked by popovertarget (e.g., show, hide, toggle), controlling how and when the popover appears.',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'hide | show | toggle | null'\r\n        }\r\n      }\r\n    },\r\n    className: {\r\n      name: 'className',\r\n      description: 'The class name of the button',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the button is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the button loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    onClick: {\r\n      name: 'onClick',\r\n      description: 'Emitted when the button is clicked',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'dark',\r\n    size: 'medium',\r\n    disabled: false,\r\n    variant: 'filled',\r\n    styles: {},\r\n    onClick: fn(),\r\n    focus: fn(),\r\n    blur: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div\r\n        [class.dark]=\"mode === 'dark'\"\r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n        <luna-icon-button\r\n          [size]=\"size\"\r\n          [disabled]=\"disabled\"\r\n          [variant]=\"variant\"\r\n          [styles]=\"styles\"\r\n          (onClick)=\"onClick($event)\"\r\n          (focus)=\"focus($event)\"\r\n          (blur)=\"blur($event)\"\r\n        >\r\n          <svg\r\n            #icon\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke-width=\"1.5\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              d=\"M6 18 18 6M6 6l12 12\"\r\n            />\r\n          </svg>\r\n        </luna-icon-button>\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\r\n  title: 'Components/Feedback/Alert',\r\n  component: LunaAlertComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Alert Component is designed to provide users with critical notifications and messages in an accessible and customizable way. Alerts are used to communicate important information, such as success, error, warnings, or informational messages. The component supports multiple styles, making it versatile and adaptable to different use cases.\r\n\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaIconButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaAlertComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-alert>\r\n  This is an alert\r\n</luna-alert>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    content: 'This is an alert',\r\n    alertStyle: 'box',\r\n    dismissible: false,\r\n    show: true,\r\n    showIcon: false,\r\n    size: 'medium',\r\n    variant: 'info',\r\n    dismissed: fn(),\r\n    styles: {}\r\n  },\r\n  argTypes: {\r\n    content: {\r\n      name: 'Content',\r\n      control: { type: 'text' },\r\n      description: 'The content of the alert',\r\n      table: {\r\n        defaultValue: { summary: 'This is an alert' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    alertStyle: {\r\n      name: 'Alert Style',\r\n      control: { type: 'select' },\r\n      description: 'The style of the alert, text or box',\r\n      options: ['text', 'box'],\r\n      table: {\r\n        defaultValue: { summary: 'box' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    dismissible: {\r\n      name: 'Dismissible',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert allows to be dismissible',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    show: {\r\n      name: 'Show alert',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert is visible',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    showIcon: {\r\n      name: 'Show Icon',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert shows an icon',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'Size',\r\n      control: { type: 'select' },\r\n      description: 'The size of the alert',\r\n      options: ['small', 'medium', 'large'],\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'Variant',\r\n      control: { type: 'select' },\r\n      description: 'The variant of the alert',\r\n      options: ['info', 'success', 'warning', 'error'],\r\n      table: {\r\n        defaultValue: { summary: 'info' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    role: {\r\n      name: 'Role',\r\n      description: 'The role attribute defines the purpose of an element, helping assistive technologies understand its function (e.g., button, navigation).',\r\n      defaultValue: 'alert',\r\n      table: {\r\n        defaultValue: { summary: 'alert' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    className: {\r\n      name: 'Class Name',\r\n      description: 'Additional CSS classes to add to the alert',\r\n      table: {\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    styles: {\r\n      name: 'Styles',\r\n      control: { type: 'object' },\r\n      description: 'Additional inline styles to add to the alert',\r\n      table: {\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    dismissed: {\r\n      name: 'Dismissed',\r\n      description: 'Event emitted when the alert is dismissed',\r\n      table: {\r\n        category: 'Outputs'\r\n      }\r\n    }\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <luna-alert\r\n        [alertStyle]=\"alertStyle\"\r\n        [dismissible]=\"dismissible\"\r\n        [show]=\"show\"\r\n        [showIcon]=\"showIcon\"\r\n        [size]=\"size\"\r\n        [variant]=\"variant\"\r\n        [styles]=\"styles\"\r\n        (dismissed)=\"dismissed()\"\r\n      >\r\n        {{ content }}\r\n      </luna-alert>\r\n    `,\r\n  })\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\r\n  title: 'Components/Forms/Input',\r\n  component: LunaInputComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormatterDirective, ToUppercaseDirective, ToLowercaseDirective, OnlyNumbersDirective]\r\n    })\r\n  ],\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Input Component provides a highly customizable, accessible, and responsive input field designed for various user interactions. Built with flexibility in mind, this component offers support for multiple input styles—such as filled, outlined, and underlined—to suit different design needs. The component accommodates essential form states, including default, focused, hover, active, disabled, and error, allowing developers to create polished and user-friendly interfaces.\r\n\r\nThe LunaUI Input Component is fully compatible with Angular Reactive Forms, making integration seamless for complex form handling. It includes a robust set of accessibility features, including ARIA support, clear focus indicators, and compatibility with screen readers, ensuring an inclusive experience for all users. With customizable helper texts, error messages, placeholder support, and optional icons, this component provides an efficient, comprehensive solution for input needs across a wide range of applications.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaInputComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaInputComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-input>\r\n</luna-input>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'light',\r\n    label: 'Test label',\r\n    size: 'medium',\r\n    variant: 'outlined',\r\n    error: false,\r\n    disabled: false,\r\n    placeholder: '',\r\n    helperText: '',\r\n    helperTextType: 'info',\r\n    defaultValue: '',\r\n    attrSize: 20,\r\n    allowWhiteSpaces: true,\r\n    transformToUppercase: false,\r\n    transformToLowercase: false,\r\n    numbersOnly: false,\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    label: {\r\n      name: 'label',\r\n      control: 'text',\r\n      description: 'The label of the input',\r\n      table: {\r\n        defaultValue: { summary: 'Try me !!' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the input',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'outlined', 'underlined'],\r\n      control: { type: 'select' },\r\n      description: 'The variant of the input',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | outlined | underlined'\r\n        }\r\n      }\r\n    },\r\n    error: {\r\n      name: 'error',\r\n      control: 'boolean',\r\n      description: 'The error state of the input',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: 'boolean',\r\n      description: 'The disabled attribute makes an input field or interactive element non-interactive. It prevents users from interacting with the element, submitting its data, or focusing on it. Disabled elements appear dimmed in most browsers to indicate they are inactive.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: \"The aria-label attribute provides an accessible name for an element, making it readable to screen readers. It’s useful for elements that don’t have visible labels, such as icons or buttons with only an icon, ensuring all users understand the element's purpose.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute specifies the id of one or more elements that describe the input, enhancing accessibility by providing additional context for screen readers. It’s commonly used to link an input field to helper text or error messages, helping users understand the input’s purpose or requirements.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    id: {\r\n      name: 'id',\r\n      description: 'The id attribute assigns a unique identifier to an HTML element. It’s used to target the element with CSS or JavaScript and to link labels to form elements, improving accessibility',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    placeholder: {\r\n      name: 'placeholder',\r\n      control: 'text',\r\n      description: \"The placeholder attribute provides hint text displayed inside the input field when it's empty, giving users an example or suggestion for what to enter.This text disappears when the user starts typing.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    helperText: {\r\n      name: 'helperText',\r\n      control: 'text',\r\n      description: 'The helper text of the input',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    helperTextType: {\r\n      name: 'helperTextType',\r\n      options: ['info', 'error', 'success', 'warning'],\r\n      control: { type: 'select' },\r\n      description: 'The helper text type of the input',\r\n      table: {\r\n        defaultValue: { summary: 'info' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'info | error | success | warning'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'type',\r\n      description: \"The type attribute specifies the input field's data type and behavior, such as text, number, email, password, date, etc. Each type controls how the input displays and restricts the data format it accepts.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: \"The name attribute specifies a unique identifier for the form field when submitting form data. It acts as the key in the form data payload sent to the server, helping identify each input's value on the backend.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    minlength: {\r\n      name: 'minlength',\r\n      description: 'The minlength attribute sets the minimum number of characters required for a valid input in a text field. This helps ensure users enter enough characters before submitting the form.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    maxlength: {\r\n      name: 'maxlength',\r\n      description: 'The maxlength attribute sets the maximum number of characters that a user can enter in an input field. It is commonly used with text inputs to limit the length of the input.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    pattern: {\r\n      name: 'pattern',\r\n      description: 'The pattern attribute specifies a regular expression that the input value must match for it to be considered valid. This is commonly used for text inputs to enforce specific formats, like phone numbers or postal codes.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    readonly: {\r\n      name: 'readonly',\r\n      description: 'The readonly attribute makes an input field non-editable while allowing the user to focus on it and select the text. Unlike disabled, a readonly input can still be submitted with form data.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    defaultValue: {\r\n      name: 'value',\r\n      control: 'text',\r\n      description: 'The value attribute sets the initial or default value of an input field. For input types like text, number, range, etc., it defines the pre-filled value displayed to the user. It can also dynamically update based on user input or scripts.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    attrSize: {\r\n      name: 'attrSize',\r\n      control: 'number',\r\n      description: 'The size of the input',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    min: {\r\n      name: 'min',\r\n      description: 'The min attribute sets the minimum allowable value for input types like number, date, or range. It prevents users from entering a value lower than the specified minimum.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    max: {\r\n      name: 'max',\r\n      description: 'The max attribute sets the maximum allowable value for input types like number, date, or range. It prevents users from entering a value higher than the specified maximum.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    step: {\r\n      name: 'step',\r\n      description: 'The step attribute defines the incremental value for input types like number, range, date, or time. It controls the intervals allowed when adjusting the input value',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    list: {\r\n      name: 'list',\r\n      description: 'The list attribute links an input to a <datalist> element, offering predefined options that users can select from or type to match, enhancing autocomplete functionality.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    allowWhiteSpaces: {\r\n      name: 'allowWhiteSpaces',\r\n      control: 'boolean',\r\n      description: 'The allowWhiteSpaces attribute allows or disallows whitespace characters in the input value.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    transformToUppercase: {\r\n      name: 'transformToUppercase',\r\n      control: 'boolean',\r\n      description: 'The transformToUppercase attribute transforms the input value to uppercase characters.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    transformToLowercase: {\r\n      name: 'transformToLowercase',\r\n      control: 'boolean',\r\n      description: 'The transformToLowercase attribute transforms the input value to lowercase characters.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    numbersOnly: {\r\n      name: 'numbersOnly',\r\n      control: 'boolean',\r\n      description: 'The numbersOnly attribute restricts the input to numeric values only.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    format: {\r\n      name: 'format',\r\n      description: 'The format attribute formats the input value according to a specified pattern or mask',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'phone | currency | creditCard | null'\r\n        }\r\n      }\r\n    },\r\n    formatEventHandler: {\r\n      name: 'formatEventHandler',\r\n      description: 'The formatEventHandler attribute is a function that handles the formatting of the input value based on the specified format.',\r\n      table: {\r\n        defaultValue: { summary: 'input' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'input | change'\r\n        }\r\n      }\r\n    },\r\n    formatCurrency: {\r\n      name: 'formatCurrency',\r\n      description: 'The formatCurrency attribute specifies the currency code for currency formatting.',\r\n      table: {\r\n        defaultValue: { summary: 'USD' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    formatDecimals: {\r\n      name: 'formatDecimals',\r\n      description: 'The formatDecimals attribute specifies the number of decimal places for currency formatting.',\r\n      table: {\r\n        defaultValue: { summary: '2' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    formatCurrencyDisplay: {\r\n      name: 'formatCurrencyDisplay',\r\n      description: 'The formatCurrencyDisplay attribute specifies how the currency should be displayed (symbol, code, or name).',\r\n      table: {\r\n        defaultValue: { summary: 'symbol' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'symbol | code | name | narrowSymbol'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the input is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the input loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    input: {\r\n      name: 'Input',\r\n      description: 'Emitted when the input value changes',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    },\r\n    change: {\r\n      name: 'Change',\r\n      description: 'Emitted when the input value changes and the input loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div\r\n        [class.dark]=\"mode === 'dark'\"\r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n        <luna-input\r\n          [label]=\"label\"\r\n          [size]=\"size\"\r\n          [variant]=\"variant\"\r\n          [error]=\"error\"\r\n          [disabled]=\"disabled\"\r\n          [placeholder]=\"placeholder\"\r\n          [helperText]=\"helperText\"\r\n          [defaultValue]=\"defaultValue\"\r\n          [attrSize]=\"attrSize\"\r\n          [allowWhiteSpaces]=\"allowWhiteSpaces\"\r\n          [transformToUppercase]=\"transformToUppercase\"\r\n          [transformToLowercase]=\"transformToLowercase\"\r\n          [numbersOnly]=\"numbersOnly\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<Props>",
                "defaultValue": "{\r\n  title: 'Components/Forms/Password Input',\r\n  component: LunaPasswordInputComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormatterDirective, ToUppercaseDirective, ToLowercaseDirective, OnlyNumbersDirective]\r\n    })\r\n  ],\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Password Input Component provides a secure and user-friendly way for users to enter and manage password data. Designed with accessibility and customization in mind, this component supports features like password visibility toggling, strength indicators, and validation messages. The component is adaptable to various styles and can seamlessly integrate with Angular forms, ensuring flexibility for both simple and complex form requirements.\r\n        \r\n        \r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaPasswordInputComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaPasswordInputComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\r\n\\`\\`\\`html\r\n<luna-password-input>\r\n</luna-password-input>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {},\r\n  argTypes: {},\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div \r\n        [class.dark]=\"mode === 'dark'\"  \r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n      \r\n      </div>\r\n    `\r\n  })\r\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      title: 'Luna UI',\r\n    },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Success Alert',\r\n  args: {\r\n    variant: 'success'\r\n  }\r\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Warning Alert',\r\n  args: {\r\n    variant: 'warning'\r\n  }\r\n}"
            },
            {
                "name": "WithIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\r\n  name: 'Alert with icon',\r\n  args: {\r\n    showIcon: true\r\n  }\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderComponent>",
                "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<PageComponent>",
                "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaButtonComponent>",
                "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaIconButtonComponent>",
                "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaAlertComponent>",
                "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaInputComponent>",
                "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LunaPasswordInputComponent>",
                "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Default Button',\r\n  args: {\r\n    variant: 'filled',\r\n    size: 'medium'\r\n  },\r\n  play: async ({ canvasElement, step }) => {\r\n    const canvas = within(canvasElement);\r\n    const button = canvas.getByTestId('luna-button')\r\n    const onClickFn = fn()\r\n    button.onclick = onClickFn();\r\n\r\n    await step('Click button', async () => {\r\n      await userEvent.click(button);\r\n    })\r\n    await waitFor(() => {\r\n      expect(button).toHaveFocus();\r\n      expect(onClickFn).toHaveBeenCalled();\r\n    });\r\n\r\n    await step('Blur button', async () => {\r\n      await userEvent.click(document.body);\r\n    })\r\n    await waitFor(() => expect(button).not.toHaveFocus());\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\r\n  title: 'Components/Buttons/Button',\r\n  component: LunaButtonComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'dark',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Button component is a versatile and highly customizable element designed to enhance the interactivity and accessibility of your user interfaces. Built with a focus on modern aesthetics and usability.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaButtonComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-button>\r\n  Click Me\r\n</luna-button>\r\n\\`\\`\\`\r\n\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the button',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\r\n      control: \"select\",\r\n      description: 'The variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | tonal | outlined | text | elevated'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: { type: 'boolean' },\r\n      description: 'The disabled attribute makes an element (like a button, input, or select) inactive, preventing user interaction and excluding it from form submission.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      },\r\n    },\r\n    value: {\r\n      name: 'value',\r\n      control: 'text',\r\n      description: 'The value attribute specifies the initial data or content of an element, commonly used in form elements like <button>.',\r\n      table: {\r\n        defaultValue: { summary: 'Try me !!' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    styles: {\r\n      name: 'styles',\r\n      control: 'object',\r\n      description: 'The styles to apply to the button',\r\n      table: {\r\n        defaultValue: { summary: '{}' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'Record<string, string>'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: 'The aria-label attribute provides an accessible name for an element, allowing screen readers to describe it when there’s no visible label.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaLive: {\r\n      name: 'ariaLive',\r\n      description: 'The aria-live attribute announces dynamic content changes to screen readers, specifying the priority level (off, polite, or assertive) to control how updates are conveyed to users.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'off | polite | assertive | '\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute links an element to another element that provides additional descriptive information, helping screen readers announce supplementary context or guidance.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'Type',\r\n      description: 'The type attribute specifies the type of an element, commonly used in <button> (e.g., submit, reset) to define its behavior and format.',\r\n      table: {\r\n        defaultValue: { summary: 'button' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'button | submit | reset'\r\n        }\r\n      }\r\n    },\r\n    form: {\r\n      name: 'form',\r\n      description: 'The form attribute associates an element (like <input>, <button>) with a specific <form> by its id, allowing the element to be part of the form even if it’s located outside of it.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: 'The name attribute assigns an identifier to form elements (like <input>, <select>, <textarea>) for server-side data submission, allowing data to be referenced by this name when the form is submitted.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertarget: {\r\n      name: 'popovertarget',\r\n      description: 'The popovertarget attribute specifies the id of an element that should be displayed as a popover, linking the triggering element to the popover content for display on interaction.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertargetaction: {\r\n      name: 'popovertargetaction',\r\n      description: 'The popovertargetaction attribute defines the action that triggers the popover linked by popovertarget (e.g., show, hide, toggle), controlling how and when the popover appears.',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'hide | show | toggle | null'\r\n        }\r\n      }\r\n    },\r\n    className: {\r\n      name: 'className',\r\n      description: 'The class name for the button',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the button is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the button loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    onClick: {\r\n      name: 'onClick',\r\n      description: 'Emitted when the button is clicked',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'dark',\r\n    size: 'medium',\r\n    disabled: false,\r\n    variant: 'filled',\r\n    value: 'Try me !!',\r\n    styles: {},\r\n    onClick: fn(),\r\n    focus: fn(),\r\n    blur: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n    <div\r\n      [class.dark]=\"mode === 'dark'\"\r\n      [class.light]=\"mode === 'light'\"\r\n    >\r\n      <luna-button\r\n        [size]=\"size\"\r\n        [disabled]=\"disabled\"\r\n        [variant]=\"variant\"\r\n        [styles]=\"styles\"\r\n        (onClick)=\"onClick($event)\"\r\n        (focus)=\"focus($event)\"\r\n        (blur)=\"blur($event)\"\r\n      >\r\n        {{value}}\r\n      </luna-button>\r\n    </div>\r\n    `\r\n  })\r\n\r\n}"
                }
            ],
            "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Default Button',\r\n  parameters: {\r\n    layout: 'centered',\r\n  },\r\n  play: async ({ canvasElement, step }) => {\r\n    const canvas = within(canvasElement);\r\n    const button = canvas.getByTestId('luna-icon-button')\r\n    const onClickFn = fn()\r\n    button.onclick = onClickFn();\r\n\r\n    await step('Click button', async () => {\r\n      await userEvent.click(button);\r\n    })\r\n    await waitFor(() => {\r\n      expect(button).toHaveFocus();\r\n      expect(onClickFn).toHaveBeenCalled();\r\n    });\r\n\r\n    await step('Blur button', async () => {\r\n      await userEvent.click(document.body);\r\n    })\r\n    await waitFor(() => expect(button).not.toHaveFocus());\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\r\n  title: 'Components/Buttons/Icon Button',\r\n  component: LunaIconButtonComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'dark',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Button Icon component is designed to provide a streamlined, icon-only button for enhanced UI interactions. Whether used for compact actions, toolbars, or key visual elements, this component brings flexibility and modern design to your interfaces.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaIconButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaIconButtonComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-icon-button>\r\n    <svg\r\n      #icon fill=\"none\" viewBox=\"0 0 24 24\"\r\n      stroke-width=\"1.5\" stroke=\"currentColor\"\r\n    >\r\n      <path\r\n        stroke-linecap=\"round\" stroke-linejoin=\"round\"\r\n        d=\"M6 18 18 6M6 6l12 12\"\r\n      />\r\n    </svg>\r\n</luna-icon-button>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the button',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'tonal', 'outlined', 'text', 'elevated'],\r\n      control: \"select\",\r\n      description: 'The variant of the button',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | tonal | outlined | text | elevated'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: { type: 'boolean' },\r\n      description: 'The disabled attribute makes an element (e.g., button, input) non-interactive, preventing user actions and disabling focus.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      },\r\n    },\r\n    styles: {\r\n      name: 'styles',\r\n      control: 'object',\r\n      description: 'The styles to apply to the button',\r\n      table: {\r\n        defaultValue: { summary: '{}' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'Record<string, string>'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: 'The aria-label attribute provides an accessible name for an element, allowing screen readers to describe it when there’s no visible label.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaLive: {\r\n      name: 'ariaLive',\r\n      description: 'The aria-live attribute announces dynamic content changes to screen readers, specifying the priority level (off, polite, or assertive) to control how updates are conveyed to users.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'off | polite | assertive | '\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute links an element to another element that provides additional descriptive information, helping screen readers announce supplementary context or guidance.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'type',\r\n      description: 'The type attribute specifies the type of an element, commonly used in <button> (e.g., submit, reset) to define its behavior and format.',\r\n      table: {\r\n        defaultValue: { summary: 'button' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'button | submit | reset'\r\n        }\r\n      }\r\n    },\r\n    form: {\r\n      name: 'form',\r\n      description: 'The form attribute associates an element (like <input>, <button>) with a specific <form> by its id, allowing the element to be part of the form even if it’s located outside of it.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: 'The name attribute assigns an identifier to form elements (like <input>, <select>, <textarea>) for server-side data submission, allowing data to be referenced by this name when the form is submitted.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertarget: {\r\n      name: 'popovertarget',\r\n      description: 'The popovertarget attribute specifies the id of an element that should be displayed as a popover, linking the triggering element to the popover content for display on interaction.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    popovertargetaction: {\r\n      name: 'popovertargetaction',\r\n      description: 'The popovertargetaction attribute defines the action that triggers the popover linked by popovertarget (e.g., show, hide, toggle), controlling how and when the popover appears.',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'hide | show | toggle | null'\r\n        }\r\n      }\r\n    },\r\n    className: {\r\n      name: 'className',\r\n      description: 'The class name of the button',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the button is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the button loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    onClick: {\r\n      name: 'onClick',\r\n      description: 'Emitted when the button is clicked',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'dark',\r\n    size: 'medium',\r\n    disabled: false,\r\n    variant: 'filled',\r\n    styles: {},\r\n    onClick: fn(),\r\n    focus: fn(),\r\n    blur: fn()\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div\r\n        [class.dark]=\"mode === 'dark'\"\r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n        <luna-icon-button\r\n          [size]=\"size\"\r\n          [disabled]=\"disabled\"\r\n          [variant]=\"variant\"\r\n          [styles]=\"styles\"\r\n          (onClick)=\"onClick($event)\"\r\n          (focus)=\"focus($event)\"\r\n          (blur)=\"blur($event)\"\r\n        >\r\n          <svg\r\n            #icon\r\n            fill=\"none\"\r\n            viewBox=\"0 0 24 24\"\r\n            stroke-width=\"1.5\"\r\n            stroke=\"currentColor\"\r\n          >\r\n            <path\r\n              stroke-linecap=\"round\"\r\n              stroke-linejoin=\"round\"\r\n              d=\"M6 18 18 6M6 6l12 12\"\r\n            />\r\n          </svg>\r\n        </luna-icon-button>\r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Default Alert',\r\n}"
                },
                {
                    "name": "Dismissible",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Dismissible Alert',\r\n  args: {\r\n    dismissible: true\r\n  }\r\n}"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Error Alert',\r\n  args: {\r\n    variant: 'error'\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\r\n  title: 'Components/Feedback/Alert',\r\n  component: LunaAlertComponent,\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Alert Component is designed to provide users with critical notifications and messages in an accessible and customizable way. Alerts are used to communicate important information, such as success, error, warnings, or informational messages. The component supports multiple styles, making it versatile and adaptable to different use cases.\r\n\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaIconButtonComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaAlertComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-alert>\r\n  This is an alert\r\n</luna-alert>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    content: 'This is an alert',\r\n    alertStyle: 'box',\r\n    dismissible: false,\r\n    show: true,\r\n    showIcon: false,\r\n    size: 'medium',\r\n    variant: 'info',\r\n    dismissed: fn(),\r\n    styles: {}\r\n  },\r\n  argTypes: {\r\n    content: {\r\n      name: 'Content',\r\n      control: { type: 'text' },\r\n      description: 'The content of the alert',\r\n      table: {\r\n        defaultValue: { summary: 'This is an alert' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    alertStyle: {\r\n      name: 'Alert Style',\r\n      control: { type: 'select' },\r\n      description: 'The style of the alert, text or box',\r\n      options: ['text', 'box'],\r\n      table: {\r\n        defaultValue: { summary: 'box' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    dismissible: {\r\n      name: 'Dismissible',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert allows to be dismissible',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    show: {\r\n      name: 'Show alert',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert is visible',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    showIcon: {\r\n      name: 'Show Icon',\r\n      control: { type: 'boolean' },\r\n      description: 'Whether the alert shows an icon',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    size: {\r\n      name: 'Size',\r\n      control: { type: 'select' },\r\n      description: 'The size of the alert',\r\n      options: ['small', 'medium', 'large'],\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'Variant',\r\n      control: { type: 'select' },\r\n      description: 'The variant of the alert',\r\n      options: ['info', 'success', 'warning', 'error'],\r\n      table: {\r\n        defaultValue: { summary: 'info' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    role: {\r\n      name: 'Role',\r\n      description: 'The role attribute defines the purpose of an element, helping assistive technologies understand its function (e.g., button, navigation).',\r\n      defaultValue: 'alert',\r\n      table: {\r\n        defaultValue: { summary: 'alert' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    className: {\r\n      name: 'Class Name',\r\n      description: 'Additional CSS classes to add to the alert',\r\n      table: {\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    styles: {\r\n      name: 'Styles',\r\n      control: { type: 'object' },\r\n      description: 'Additional inline styles to add to the alert',\r\n      table: {\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    dismissed: {\r\n      name: 'Dismissed',\r\n      description: 'Event emitted when the alert is dismissed',\r\n      table: {\r\n        category: 'Outputs'\r\n      }\r\n    }\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <luna-alert\r\n        [alertStyle]=\"alertStyle\"\r\n        [dismissible]=\"dismissible\"\r\n        [show]=\"show\"\r\n        [showIcon]=\"showIcon\"\r\n        [size]=\"size\"\r\n        [variant]=\"variant\"\r\n        [styles]=\"styles\"\r\n        (dismissed)=\"dismissed()\"\r\n      >\r\n        {{ content }}\r\n      </luna-alert>\r\n    `,\r\n  })\r\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Success Alert',\r\n  args: {\r\n    variant: 'success'\r\n  }\r\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Warning Alert',\r\n  args: {\r\n    variant: 'warning'\r\n  }\r\n}"
                },
                {
                    "name": "WithIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Alert with icon',\r\n  args: {\r\n    showIcon: true\r\n  }\r\n}"
                }
            ],
            "projects/lunaui-angular/src/lib/forms/input/input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Default',\r\n}"
                },
                {
                    "name": "InputError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Input with error',\r\n  args: {\r\n    error: true,\r\n  }\r\n}"
                },
                {
                    "name": "InputFilled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Input filled',\r\n  args: {\r\n    variant: 'filled',\r\n  }\r\n}"
                },
                {
                    "name": "InputNoLable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Input without label',\r\n  args: {\r\n    label: '',\r\n    placeholder: 'Enter your name'\r\n  }\r\n}"
                },
                {
                    "name": "InputUnderline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Input outlined',\r\n  args: {\r\n    variant: 'underlined',\r\n  }\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\r\n  title: 'Components/Forms/Input',\r\n  component: LunaInputComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormatterDirective, ToUppercaseDirective, ToLowercaseDirective, OnlyNumbersDirective]\r\n    })\r\n  ],\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Input Component provides a highly customizable, accessible, and responsive input field designed for various user interactions. Built with flexibility in mind, this component offers support for multiple input styles—such as filled, outlined, and underlined—to suit different design needs. The component accommodates essential form states, including default, focused, hover, active, disabled, and error, allowing developers to create polished and user-friendly interfaces.\r\n\r\nThe LunaUI Input Component is fully compatible with Angular Reactive Forms, making integration seamless for complex form handling. It includes a robust set of accessibility features, including ARIA support, clear focus indicators, and compatibility with screen readers, ensuring an inclusive experience for all users. With customizable helper texts, error messages, placeholder support, and optional icons, this component provides an efficient, comprehensive solution for input needs across a wide range of applications.\r\n\r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaInputComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaInputComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\\`\\`\\`html\r\n<luna-input>\r\n</luna-input>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {\r\n    mode: 'light',\r\n    label: 'Test label',\r\n    size: 'medium',\r\n    variant: 'outlined',\r\n    error: false,\r\n    disabled: false,\r\n    placeholder: '',\r\n    helperText: '',\r\n    helperTextType: 'info',\r\n    defaultValue: '',\r\n    attrSize: 20,\r\n    allowWhiteSpaces: true,\r\n    transformToUppercase: false,\r\n    transformToLowercase: false,\r\n    numbersOnly: false,\r\n  },\r\n  argTypes: {\r\n    mode: {\r\n      name: 'Mode',\r\n      options: ['light', 'dark'],\r\n      control: { type: 'select' },\r\n      description: 'The mode of the button',\r\n      table: {\r\n        defaultValue: { summary: 'dark' },\r\n        category: 'Inputs'\r\n      }\r\n    },\r\n    label: {\r\n      name: 'label',\r\n      control: 'text',\r\n      description: 'The label of the input',\r\n      table: {\r\n        defaultValue: { summary: 'Try me !!' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    size: {\r\n      name: 'size',\r\n      options: ['small', 'medium', 'large'],\r\n      control: { type: 'select' },\r\n      description: 'The size of the input',\r\n      table: {\r\n        defaultValue: { summary: 'medium' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'small | medium | large'\r\n        }\r\n      }\r\n    },\r\n    variant: {\r\n      name: 'variant',\r\n      options: ['filled', 'outlined', 'underlined'],\r\n      control: { type: 'select' },\r\n      description: 'The variant of the input',\r\n      table: {\r\n        defaultValue: { summary: 'filled' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'filled | outlined | underlined'\r\n        }\r\n      }\r\n    },\r\n    error: {\r\n      name: 'error',\r\n      control: 'boolean',\r\n      description: 'The error state of the input',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    disabled: {\r\n      name: 'disabled',\r\n      control: 'boolean',\r\n      description: 'The disabled attribute makes an input field or interactive element non-interactive. It prevents users from interacting with the element, submitting its data, or focusing on it. Disabled elements appear dimmed in most browsers to indicate they are inactive.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    ariaLabel: {\r\n      name: 'ariaLabel',\r\n      description: \"The aria-label attribute provides an accessible name for an element, making it readable to screen readers. It’s useful for elements that don’t have visible labels, such as icons or buttons with only an icon, ensuring all users understand the element's purpose.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    ariaDescribedBy: {\r\n      name: 'ariaDescribedBy',\r\n      description: 'The aria-describedby attribute specifies the id of one or more elements that describe the input, enhancing accessibility by providing additional context for screen readers. It’s commonly used to link an input field to helper text or error messages, helping users understand the input’s purpose or requirements.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    id: {\r\n      name: 'id',\r\n      description: 'The id attribute assigns a unique identifier to an HTML element. It’s used to target the element with CSS or JavaScript and to link labels to form elements, improving accessibility',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    placeholder: {\r\n      name: 'placeholder',\r\n      control: 'text',\r\n      description: \"The placeholder attribute provides hint text displayed inside the input field when it's empty, giving users an example or suggestion for what to enter.This text disappears when the user starts typing.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    helperText: {\r\n      name: 'helperText',\r\n      control: 'text',\r\n      description: 'The helper text of the input',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    helperTextType: {\r\n      name: 'helperTextType',\r\n      options: ['info', 'error', 'success', 'warning'],\r\n      control: { type: 'select' },\r\n      description: 'The helper text type of the input',\r\n      table: {\r\n        defaultValue: { summary: 'info' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'info | error | success | warning'\r\n        }\r\n      }\r\n    },\r\n    type: {\r\n      name: 'type',\r\n      description: \"The type attribute specifies the input field's data type and behavior, such as text, number, email, password, date, etc. Each type controls how the input displays and restricts the data format it accepts.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    name: {\r\n      name: 'name',\r\n      description: \"The name attribute specifies a unique identifier for the form field when submitting form data. It acts as the key in the form data payload sent to the server, helping identify each input's value on the backend.\",\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    minlength: {\r\n      name: 'minlength',\r\n      description: 'The minlength attribute sets the minimum number of characters required for a valid input in a text field. This helps ensure users enter enough characters before submitting the form.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    maxlength: {\r\n      name: 'maxlength',\r\n      description: 'The maxlength attribute sets the maximum number of characters that a user can enter in an input field. It is commonly used with text inputs to limit the length of the input.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    pattern: {\r\n      name: 'pattern',\r\n      description: 'The pattern attribute specifies a regular expression that the input value must match for it to be considered valid. This is commonly used for text inputs to enforce specific formats, like phone numbers or postal codes.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    readonly: {\r\n      name: 'readonly',\r\n      description: 'The readonly attribute makes an input field non-editable while allowing the user to focus on it and select the text. Unlike disabled, a readonly input can still be submitted with form data.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    defaultValue: {\r\n      name: 'value',\r\n      control: 'text',\r\n      description: 'The value attribute sets the initial or default value of an input field. For input types like text, number, range, etc., it defines the pre-filled value displayed to the user. It can also dynamically update based on user input or scripts.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    attrSize: {\r\n      name: 'attrSize',\r\n      control: 'number',\r\n      description: 'The size of the input',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    min: {\r\n      name: 'min',\r\n      description: 'The min attribute sets the minimum allowable value for input types like number, date, or range. It prevents users from entering a value lower than the specified minimum.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    max: {\r\n      name: 'max',\r\n      description: 'The max attribute sets the maximum allowable value for input types like number, date, or range. It prevents users from entering a value higher than the specified maximum.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    step: {\r\n      name: 'step',\r\n      description: 'The step attribute defines the incremental value for input types like number, range, date, or time. It controls the intervals allowed when adjusting the input value',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    list: {\r\n      name: 'list',\r\n      description: 'The list attribute links an input to a <datalist> element, offering predefined options that users can select from or type to match, enhancing autocomplete functionality.',\r\n      table: {\r\n        defaultValue: { summary: '' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    allowWhiteSpaces: {\r\n      name: 'allowWhiteSpaces',\r\n      control: 'boolean',\r\n      description: 'The allowWhiteSpaces attribute allows or disallows whitespace characters in the input value.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    transformToUppercase: {\r\n      name: 'transformToUppercase',\r\n      control: 'boolean',\r\n      description: 'The transformToUppercase attribute transforms the input value to uppercase characters.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    transformToLowercase: {\r\n      name: 'transformToLowercase',\r\n      control: 'boolean',\r\n      description: 'The transformToLowercase attribute transforms the input value to lowercase characters.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    numbersOnly: {\r\n      name: 'numbersOnly',\r\n      control: 'boolean',\r\n      description: 'The numbersOnly attribute restricts the input to numeric values only.',\r\n      table: {\r\n        defaultValue: { summary: 'false' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'boolean'\r\n        }\r\n      }\r\n    },\r\n    format: {\r\n      name: 'format',\r\n      description: 'The format attribute formats the input value according to a specified pattern or mask',\r\n      table: {\r\n        defaultValue: { summary: 'null' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'phone | currency | creditCard | null'\r\n        }\r\n      }\r\n    },\r\n    formatEventHandler: {\r\n      name: 'formatEventHandler',\r\n      description: 'The formatEventHandler attribute is a function that handles the formatting of the input value based on the specified format.',\r\n      table: {\r\n        defaultValue: { summary: 'input' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'input | change'\r\n        }\r\n      }\r\n    },\r\n    formatCurrency: {\r\n      name: 'formatCurrency',\r\n      description: 'The formatCurrency attribute specifies the currency code for currency formatting.',\r\n      table: {\r\n        defaultValue: { summary: 'USD' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'string'\r\n        }\r\n      }\r\n    },\r\n    formatDecimals: {\r\n      name: 'formatDecimals',\r\n      description: 'The formatDecimals attribute specifies the number of decimal places for currency formatting.',\r\n      table: {\r\n        defaultValue: { summary: '2' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'number'\r\n        }\r\n      }\r\n    },\r\n    formatCurrencyDisplay: {\r\n      name: 'formatCurrencyDisplay',\r\n      description: 'The formatCurrencyDisplay attribute specifies how the currency should be displayed (symbol, code, or name).',\r\n      table: {\r\n        defaultValue: { summary: 'symbol' },\r\n        category: 'Inputs',\r\n        type: {\r\n          summary: 'symbol | code | name | narrowSymbol'\r\n        }\r\n      }\r\n    },\r\n    focus: {\r\n      name: 'Focus',\r\n      description: 'Emitted when the input is focused',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    blur: {\r\n      name: 'Blur',\r\n      description: 'Emitted when the input loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<FocusEvent>'\r\n        }\r\n      }\r\n    },\r\n    input: {\r\n      name: 'Input',\r\n      description: 'Emitted when the input value changes',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    },\r\n    change: {\r\n      name: 'Change',\r\n      description: 'Emitted when the input value changes and the input loses focus',\r\n      table: {\r\n        category: 'Events',\r\n        type: {\r\n          summary: 'EventEmitter<Event>'\r\n        }\r\n      }\r\n    },\r\n  },\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div\r\n        [class.dark]=\"mode === 'dark'\"\r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n        <luna-input\r\n          [label]=\"label\"\r\n          [size]=\"size\"\r\n          [variant]=\"variant\"\r\n          [error]=\"error\"\r\n          [disabled]=\"disabled\"\r\n          [placeholder]=\"placeholder\"\r\n          [helperText]=\"helperText\"\r\n          [defaultValue]=\"defaultValue\"\r\n          [attrSize]=\"attrSize\"\r\n          [allowWhiteSpaces]=\"allowWhiteSpaces\"\r\n          [transformToUppercase]=\"transformToUppercase\"\r\n          [transformToLowercase]=\"transformToLowercase\"\r\n          [numbersOnly]=\"numbersOnly\"\r\n        />\r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  name: 'Default',\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<Props>",
                    "defaultValue": "{\r\n  title: 'Components/Forms/Password Input',\r\n  component: LunaPasswordInputComponent,\r\n  decorators: [\r\n    moduleMetadata({\r\n      imports: [FormatterDirective, ToUppercaseDirective, ToLowercaseDirective, OnlyNumbersDirective]\r\n    })\r\n  ],\r\n  tags: ['autodocs', 'stable'],\r\n  parameters: {\r\n    layout: 'centered',\r\n    backgrounds: {\r\n      default: 'light',\r\n      values: [\r\n        { name: 'dark', value: 'var(--background-dark)' },\r\n        { name: 'light', value: 'var(--background-light)' },\r\n      ]\r\n    },\r\n    docs: {\r\n      description: {\r\n        component: `\r\nThe LunaUI Password Input Component provides a secure and user-friendly way for users to enter and manage password data. Designed with accessibility and customization in mind, this component supports features like password visibility toggling, strength indicators, and validation messages. The component is adaptable to various styles and can seamlessly integrate with Angular forms, ensuring flexibility for both simple and complex form requirements.\r\n        \r\n        \r\n#### Installation\r\n\r\n\\`\\`\\`bash\r\nnpm i @lunaui/angular\r\n\\`\\`\\`\r\n\r\n#### Usage\r\n\r\n\r\n\\`\\`\\`typescript\r\nimport { LunaPasswordInputComponent } from '@lunaui/angular';\r\n\r\n@component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [LunaPasswordInputComponent],\r\n})\r\n\r\n\\`\\`\\`\r\n\r\n\r\n\\`\\`\\`html\r\n<luna-password-input>\r\n</luna-password-input>\r\n\\`\\`\\`\r\n        `\r\n      }\r\n    }\r\n  },\r\n  args: {},\r\n  argTypes: {},\r\n  render: (args) => ({\r\n    props: args,\r\n    template: `\r\n      <div \r\n        [class.dark]=\"mode === 'dark'\"  \r\n        [class.light]=\"mode === 'light'\"\r\n      >\r\n      \r\n      </div>\r\n    `\r\n  })\r\n}"
                }
            ],
            "projects/lunaui-angular/src/stories/button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'large',\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\r\n  title: 'Example/Button',\r\n  component: ButtonComponent,\r\n  tags: ['autodocs'],\r\n  argTypes: {\r\n    backgroundColor: {\r\n      control: 'color',\r\n    },\r\n  },\r\n  // Use `fn` to spy on the onClick arg, which will appear in the actions panel once invoked: https://storybook.js.org/docs/essentials/actions#action-args\r\n  args: { onClick: fn() },\r\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    primary: true,\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    label: 'Button',\r\n  },\r\n}"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\r\n  args: {\r\n    size: 'small',\r\n    label: 'Button',\r\n  },\r\n}"
                }
            ],
            "projects/lunaui-angular/src/stories/header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    user: {\n      name: 'Jane Doe',\n    },\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<HeaderComponent>",
                    "defaultValue": "{\n  title: 'Example/Header',\n  component: HeaderComponent,\n  // This component will have an automatically generated Autodocs entry: https://storybook.js.org/docs/writing-docs/autodocs\n  tags: ['autodocs'],\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n  args: {\n    onLogin: fn(),\n    onLogout: fn(),\n    onCreateAccount: fn(),\n  },\n}"
                }
            ],
            "projects/lunaui-angular/src/stories/page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  play: async ({ canvasElement }) => {\n    const canvas = within(canvasElement);\n    const loginButton = canvas.getByRole('button', { name: /Log in/i });\n    await expect(loginButton).toBeInTheDocument();\n    await userEvent.click(loginButton);\n    await expect(loginButton).not.toBeInTheDocument();\n\n    const logoutButton = canvas.getByRole('button', { name: /Log out/i });\n    await expect(logoutButton).toBeInTheDocument();\n  },\n}"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<PageComponent>",
                    "defaultValue": "{\n  title: 'Example/Page',\n  component: PageComponent,\n  parameters: {\n    // More on how to position stories at: https://storybook.js.org/docs/configure/story-layout\n    layout: 'fullscreen',\n  },\n}"
                }
            ],
            "projects/lunaui-angular/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/lunaui-angular/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\r\n  parameters: {\r\n    docs: {\r\n      title: 'Luna UI',\r\n    },\r\n    controls: {\r\n      matchers: {\r\n        color: /(background|color)$/i,\r\n        date: /Date$/i,\r\n      },\r\n    },\r\n  },\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/lunaui-angular/src/stories/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/lunaui-angular/src/stories/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/stories/header.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderComponent>",
                    "file": "projects/lunaui-angular/src/stories/header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/stories/page.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<PageComponent>",
                    "file": "projects/lunaui-angular/src/stories/page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaButtonComponent>",
                    "file": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaIconButtonComponent>",
                    "file": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaAlertComponent>",
                    "file": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/forms/input/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaInputComponent>",
                    "file": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ],
            "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LunaPasswordInputComponent>",
                    "file": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 183
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/lunaui-angular/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/buttons/icon-button/icon-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dismissible",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/feedback/alert/alert.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputFilled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputNoLable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "InputUnderline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Props",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/lib/forms/password-input/password-input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/lunaui-angular/src/stories/page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}